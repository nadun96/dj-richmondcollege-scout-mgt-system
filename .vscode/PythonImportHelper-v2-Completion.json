[
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pygal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygal",
        "description": "pygal",
        "detail": "pygal",
        "documentation": {}
    },
    {
        "label": "pygraphviz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygraphviz",
        "description": "pygraphviz",
        "detail": "pygraphviz",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygraphviz",
        "description": "pygraphviz",
        "isExtraImport": true,
        "detail": "pygraphviz",
        "documentation": {}
    },
    {
        "label": "core.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "core.models",
        "description": "core.models",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserFile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MembershipFee",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MemberRole",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Leader",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MemberRole",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Complete",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Patrol",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Communication",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MembershipFee",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Leader",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserFile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Complete",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserFile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Complete",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserFile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Complete",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserFile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MembershipFee",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MemberRole",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Leader",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MemberRole",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Complete",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Patrol",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Communication",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MembershipFee",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Leader",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "LogEntry",
        "importPath": "django.contrib.admin.models",
        "description": "django.contrib.admin.models",
        "isExtraImport": true,
        "detail": "django.contrib.admin.models",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "Camp",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Hike",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Requirement",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Requirement",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Camp",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Hike",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Badge",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Requirement",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Hike",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Camp",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Badge",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Requirement",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Camp",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Camp",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Hike",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Badge",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Requirement",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Hike",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Camp",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Badge",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Requirement",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "Patrol",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Communication",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Photo",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Announcement",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Communication",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Patrol",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Photo",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "manager.models",
        "description": "manager.models",
        "isExtraImport": true,
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "generate_username",
        "importPath": "login.utils",
        "description": "login.utils",
        "isExtraImport": true,
        "detail": "login.utils",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "django.contrib.sessions.models",
        "description": "django.contrib.sessions.models",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.models",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "default_storage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DatePickerInput",
        "importPath": "bootstrap_datepicker_plus.widgets",
        "description": "bootstrap_datepicker_plus.widgets",
        "isExtraImport": true,
        "detail": "bootstrap_datepicker_plus.widgets",
        "documentation": {}
    },
    {
        "label": "YearPickerInput",
        "importPath": "bootstrap_datepicker_plus.widgets",
        "description": "bootstrap_datepicker_plus.widgets",
        "isExtraImport": true,
        "detail": "bootstrap_datepicker_plus.widgets",
        "documentation": {}
    },
    {
        "label": "DatePickerInput",
        "importPath": "bootstrap_datepicker_plus.widgets",
        "description": "bootstrap_datepicker_plus.widgets",
        "isExtraImport": true,
        "detail": "bootstrap_datepicker_plus.widgets",
        "documentation": {}
    },
    {
        "label": "YearPickerInput",
        "importPath": "bootstrap_datepicker_plus.widgets",
        "description": "bootstrap_datepicker_plus.widgets",
        "isExtraImport": true,
        "detail": "bootstrap_datepicker_plus.widgets",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "importPath": "patrol.models",
        "description": "patrol.models",
        "isExtraImport": true,
        "detail": "patrol.models",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "importPath": "patrol.models",
        "description": "patrol.models",
        "isExtraImport": true,
        "detail": "patrol.models",
        "documentation": {}
    },
    {
        "label": "AttendanceForm",
        "importPath": "patrol.forms",
        "description": "patrol.forms",
        "isExtraImport": true,
        "detail": "patrol.forms",
        "documentation": {}
    },
    {
        "label": "AttendanceForm",
        "importPath": "patrol.forms",
        "description": "patrol.forms",
        "isExtraImport": true,
        "detail": "patrol.forms",
        "documentation": {}
    },
    {
        "label": "session_processor",
        "importPath": "core.views",
        "description": "core.views",
        "isExtraImport": true,
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Font",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "PatternFill",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "Alignment",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "ExtractWeekDay",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Broken",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Lend",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pkgutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkgutil",
        "description": "pkgutil",
        "detail": "pkgutil",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "b85decode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": ".v4.Scripts.pygal_gen",
        "description": ".v4.Scripts.pygal_gen",
        "peekOfCode": "parser = argparse.ArgumentParser(\n    description='Generate pygal chart in command line',\n    prog='pygal_gen')\nparser.add_argument('-t', '--type', dest='type', default='Line',\n                    choices=map(lambda x: x.__name__, pygal.CHARTS),\n                    help='Kind of chart to generate')\nparser.add_argument('-o', '--output', dest='filename', default='pygal_out.svg',\n                    help='Filename to write the svg to')\nparser.add_argument('-s', '--serie', dest='series', nargs='+', action='append',\n                    help='Add a serie in the form (title val1 val2...)')",
        "detail": ".v4.Scripts.pygal_gen",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": ".v4.Scripts.pygal_gen",
        "description": ".v4.Scripts.pygal_gen",
        "peekOfCode": "config = parser.parse_args()\nchart = getattr(pygal, config.type)(**vars(config))\nfor serie in config.series:\n    chart.add(serie[0], map(float, serie[1:]))\nchart.render_to_file(config.filename)",
        "detail": ".v4.Scripts.pygal_gen",
        "documentation": {}
    },
    {
        "label": "chart",
        "kind": 5,
        "importPath": ".v4.Scripts.pygal_gen",
        "description": ".v4.Scripts.pygal_gen",
        "peekOfCode": "chart = getattr(pygal, config.type)(**vars(config))\nfor serie in config.series:\n    chart.add(serie[0], map(float, serie[1:]))\nchart.render_to_file(config.filename)",
        "detail": ".v4.Scripts.pygal_gen",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_attributes",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_attributes",
        "peekOfCode": "A = pgv.AGraph(directed=True, strict=True, rankdir=\"LR\")\n# add node 1 with color red\nA.add_node(1, color=\"red\")\nA.add_node(5, color=\"blue\")\n# add some edges\nA.add_edge(1, 2, color=\"green\")\nA.add_edge(2, 3)\nA.add_edge(1, 3)\nA.add_edge(3, 4)\nA.add_edge(3, 5)",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_attributes",
        "documentation": {}
    },
    {
        "label": "A.graph_attr[\"epsilon\"]",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_attributes",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_attributes",
        "peekOfCode": "A.graph_attr[\"epsilon\"] = \"0.001\"\nprint(A.string())  # print dot file to standard output\nA.layout(\"dot\")  # layout with dot\nA.draw(\"foo.png\")  # write to file",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_attributes",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_miles",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return a graph from the data in miles_dat.txt.\n    Edges are made between cities that are less then 300 miles apart.\n    \"\"\"\n    import math\n    import re\n    import gzip\n    G = pgv.AGraph(name=\"miles_dat\")\n    G.node_attr[\"shape\"] = \"circle\"\n    G.node_attr[\"fixedsize\"] = \"true\"",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_miles",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_miles",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_miles",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (aric.hagberg@gmail.com)\"\"\"\ndef miles_graph():\n    \"\"\"Return a graph from the data in miles_dat.txt.\n    Edges are made between cities that are less then 300 miles apart.\n    \"\"\"\n    import math\n    import re\n    import gzip\n    G = pgv.AGraph(name=\"miles_dat\")\n    G.node_attr[\"shape\"] = \"circle\"",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_miles",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\nimport pygraphviz as pgv\nA = pgv.AGraph()\nA.add_edge(1, 2)\nA.add_edge(2, 3)\nA.add_edge(1, 3)\nprint(A.string())  # print to screen\nA.write(\"simple.dot\")  # write to simple.dot\nB = pgv.AGraph(\"simple.dot\")  # create a new graph from file\nB.layout()  # layout with default (neato)",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "peekOfCode": "A = pgv.AGraph()\nA.add_edge(1, 2)\nA.add_edge(2, 3)\nA.add_edge(1, 3)\nprint(A.string())  # print to screen\nA.write(\"simple.dot\")  # write to simple.dot\nB = pgv.AGraph(\"simple.dot\")  # create a new graph from file\nB.layout()  # layout with default (neato)\nB.draw(\"simple.png\")  # draw png",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "peekOfCode": "B = pgv.AGraph(\"simple.dot\")  # create a new graph from file\nB.layout()  # layout with default (neato)\nB.draw(\"simple.png\")  # draw png",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_simple",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\nfrom pygraphviz import *\nA = AGraph()\n# set some default node attributes\nA.node_attr[\"style\"] = \"filled\"\nA.node_attr[\"shape\"] = \"circle\"\nA.node_attr[\"fixedsize\"] = \"true\"\nA.node_attr[\"fontcolor\"] = \"#FFFFFF\"\n# make a star in shades of red\nfor i in range(1, 16):",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "peekOfCode": "A = AGraph()\n# set some default node attributes\nA.node_attr[\"style\"] = \"filled\"\nA.node_attr[\"shape\"] = \"circle\"\nA.node_attr[\"fixedsize\"] = \"true\"\nA.node_attr[\"fontcolor\"] = \"#FFFFFF\"\n# make a star in shades of red\nfor i in range(1, 16):\n    A.add_edge(0, i)\n    n = A.get_node(i)",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "documentation": {}
    },
    {
        "label": "A.node_attr[\"style\"]",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "peekOfCode": "A.node_attr[\"style\"] = \"filled\"\nA.node_attr[\"shape\"] = \"circle\"\nA.node_attr[\"fixedsize\"] = \"true\"\nA.node_attr[\"fontcolor\"] = \"#FFFFFF\"\n# make a star in shades of red\nfor i in range(1, 16):\n    A.add_edge(0, i)\n    n = A.get_node(i)\n    n.attr[\"fillcolor\"] = \"#%2x0000\" % (i * 16)\n    n.attr[\"height\"] = \"%s\" % (i / 16.0 + 0.5)",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "documentation": {}
    },
    {
        "label": "A.node_attr[\"shape\"]",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "peekOfCode": "A.node_attr[\"shape\"] = \"circle\"\nA.node_attr[\"fixedsize\"] = \"true\"\nA.node_attr[\"fontcolor\"] = \"#FFFFFF\"\n# make a star in shades of red\nfor i in range(1, 16):\n    A.add_edge(0, i)\n    n = A.get_node(i)\n    n.attr[\"fillcolor\"] = \"#%2x0000\" % (i * 16)\n    n.attr[\"height\"] = \"%s\" % (i / 16.0 + 0.5)\n    n.attr[\"width\"] = \"%s\" % (i / 16.0 + 0.5)",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "documentation": {}
    },
    {
        "label": "A.node_attr[\"fixedsize\"]",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "peekOfCode": "A.node_attr[\"fixedsize\"] = \"true\"\nA.node_attr[\"fontcolor\"] = \"#FFFFFF\"\n# make a star in shades of red\nfor i in range(1, 16):\n    A.add_edge(0, i)\n    n = A.get_node(i)\n    n.attr[\"fillcolor\"] = \"#%2x0000\" % (i * 16)\n    n.attr[\"height\"] = \"%s\" % (i / 16.0 + 0.5)\n    n.attr[\"width\"] = \"%s\" % (i / 16.0 + 0.5)\nprint(A.string())  # print to screen",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "documentation": {}
    },
    {
        "label": "A.node_attr[\"fontcolor\"]",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "peekOfCode": "A.node_attr[\"fontcolor\"] = \"#FFFFFF\"\n# make a star in shades of red\nfor i in range(1, 16):\n    A.add_edge(0, i)\n    n = A.get_node(i)\n    n.attr[\"fillcolor\"] = \"#%2x0000\" % (i * 16)\n    n.attr[\"height\"] = \"%s\" % (i / 16.0 + 0.5)\n    n.attr[\"width\"] = \"%s\" % (i / 16.0 + 0.5)\nprint(A.string())  # print to screen\nA.write(\"star.dot\")  # write to simple.dot",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_star",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "peekOfCode": "A = pgv.AGraph()\n# add some edges\nA.add_edge(1, 2)\nA.add_edge(2, 3)\nA.add_edge(1, 3)\nA.add_edge(3, 4)\nA.add_edge(3, 5)\nA.add_edge(3, 6)\nA.add_edge(4, 6)\n# make a subgraph with rank='same'",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "peekOfCode": "B = A.add_subgraph([4, 5, 6], name=\"s1\", rank=\"same\")\nB.graph_attr[\"rank\"] = \"same\"\nprint(A.string())  # print dot file to standard output\nA.draw(\"subgraph.png\", prog=\"neato\")",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "documentation": {}
    },
    {
        "label": "B.graph_attr[\"rank\"]",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "peekOfCode": "B.graph_attr[\"rank\"] = \"same\"\nprint(A.string())  # print dot file to standard output\nA.draw(\"subgraph.png\", prog=\"neato\")",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.plot_subgraph",
        "documentation": {}
    },
    {
        "label": "pygraphviz_graph",
        "kind": 2,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.skip_django_simple",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.skip_django_simple",
        "peekOfCode": "def pygraphviz_graph(request):\n    import pygraphviz as P\n    A = P.AGraph()  # init empty graph\n    # set some default node attributes\n    A.node_attr[\"style\"] = \"filled\"\n    A.node_attr[\"shape\"] = \"circle\"\n    # Add edges (and nodes)\n    A.add_edge(1, 2)\n    A.add_edge(2, 3)\n    A.add_edge(1, 3)",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.skip_django_simple",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.skip_django_simple",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.skip_django_simple",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\ntry:\n    from django.http import HttpResponse\nexcept ImportError:  # this won't run without Django, print message\n    print(\"Django not found.\")\ndef pygraphviz_graph(request):\n    import pygraphviz as P\n    A = P.AGraph()  # init empty graph\n    # set some default node attributes\n    A.node_attr[\"style\"] = \"filled\"",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.skip_django_simple",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "peekOfCode": "A = pgv.AGraph(encoding=\"UTF-8\")\n# nodes, attributes, etc can be strings or unicode\nA.add_node(1, label=\"plain string\")\nA.add_node(2, label=\"unicode\")\n# you can enter unicode text as\nhello = \"Здравствуйте!\"\nA.add_node(3, label=hello)\n# or using unicode code points\nhello = \"\\u0417\\u0434\\u0440\\u0430\\u0432\\u0441\\u0442\\u0432\\u0443\\u0439\\u0442\\u0435!\"\nA.add_node(hello)  # unicode node label",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "peekOfCode": "hello = \"Здравствуйте!\"\nA.add_node(3, label=hello)\n# or using unicode code points\nhello = \"\\u0417\\u0434\\u0440\\u0430\\u0432\\u0441\\u0442\\u0432\\u0443\\u0439\\u0442\\u0435!\"\nA.add_node(hello)  # unicode node label\ngoodbye = \"До свидания\"\nA.add_edge(1, hello, key=goodbye)\nA.add_edge(\"שלום\", hello)\n# A.add_edge(1,3,hello=\"こんにちは / ｺﾝﾆﾁﾊ\")\nA.add_edge(1, \"こんにちは\")",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "peekOfCode": "hello = \"\\u0417\\u0434\\u0440\\u0430\\u0432\\u0441\\u0442\\u0432\\u0443\\u0439\\u0442\\u0435!\"\nA.add_node(hello)  # unicode node label\ngoodbye = \"До свидания\"\nA.add_edge(1, hello, key=goodbye)\nA.add_edge(\"שלום\", hello)\n# A.add_edge(1,3,hello=\"こんにちは / ｺﾝﾆﾁﾊ\")\nA.add_edge(1, \"こんにちは\")\nprint(A)  # print to screen\nA.write(\"utf8.dot\")  # write to simple.dot",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "documentation": {}
    },
    {
        "label": "goodbye",
        "kind": 5,
        "importPath": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "description": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "peekOfCode": "goodbye = \"До свидания\"\nA.add_edge(1, hello, key=goodbye)\nA.add_edge(\"שלום\", hello)\n# A.add_edge(1,3,hello=\"こんにちは / ｺﾝﾆﾁﾊ\")\nA.add_edge(1, \"こんにちは\")\nprint(A)  # print to screen\nA.write(\"utf8.dot\")  # write to simple.dot",
        "detail": ".v4.share.doc.pygraphviz-1.9.examples.skip_utf8_encoding",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0001_initial",
        "description": "core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('manager', '0001_initial'),\n        ('member', '0001_initial'),\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',",
        "detail": "core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0002_alter_memberrole_role",
        "description": "core.migrations.0002_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(3, 'Secretary'), (1, 'Admin'), (4, 'Storekeeper'), (2, 'Member')]),\n        ),",
        "detail": "core.migrations.0002_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0003_alter_memberrole_role",
        "description": "core.migrations.0003_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0002_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(1, 'Admin'), (2, 'Member'), (3, 'Secretary'), (4, 'Storekeeper')]),\n        ),",
        "detail": "core.migrations.0003_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0004_alter_complete_completed_alter_memberrole_role",
        "description": "core.migrations.0004_alter_complete_completed_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0003_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='complete',\n            name='completed',\n            field=models.DateField(blank=True, null=True),\n        ),",
        "detail": "core.migrations.0004_alter_complete_completed_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0005_alter_memberrole_role",
        "description": "core.migrations.0005_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0004_alter_complete_completed_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(3, 'Secretary'), (2, 'Member'), (4, 'Storekeeper'), (1, 'Admin')]),\n        ),",
        "detail": "core.migrations.0005_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0006_alter_memberrole_role",
        "description": "core.migrations.0006_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0005_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(3, 'Secretary'), (2, 'Member'), (1, 'Admin'), (4, 'Storekeeper')]),\n        ),",
        "detail": "core.migrations.0006_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0007_alter_memberrole_role",
        "description": "core.migrations.0007_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0006_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(4, 'Storekeeper'), (2, 'Member'), (3, 'Secretary'), (1, 'Admin')]),\n        ),",
        "detail": "core.migrations.0007_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0008_alter_memberrole_role",
        "description": "core.migrations.0008_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0007_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(4, 'Storekeeper'), (2, 'Member'), (1, 'Admin'), (3, 'Secretary')]),\n        ),",
        "detail": "core.migrations.0008_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0009_alter_group_about_alter_memberrole_role",
        "description": "core.migrations.0009_alter_group_about_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0008_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='group',\n            name='about',\n            field=models.TextField(blank=True, max_length=1000),\n        ),",
        "detail": "core.migrations.0009_alter_group_about_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0010_alter_memberrole_role",
        "description": "core.migrations.0010_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0009_alter_group_about_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(2, 'Member'), (1, 'Admin'), (3, 'Secretary'), (4, 'Storekeeper')]),\n        ),",
        "detail": "core.migrations.0010_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0011_alter_memberrole_role",
        "description": "core.migrations.0011_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0010_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(3, 'Secretary'), (2, 'Member'), (4, 'Storekeeper'), (1, 'Admin')]),\n        ),",
        "detail": "core.migrations.0011_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0012_alter_memberrole_role",
        "description": "core.migrations.0012_alter_memberrole_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0011_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='memberrole',\n            name='role',\n            field=models.IntegerField(blank=True, choices=[(4, 'Storekeeper'), (2, 'Member'), (1, 'Admin'), (3, 'Secretary')]),\n        ),",
        "detail": "core.migrations.0012_alter_memberrole_role",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    list_display = ['username', 'pk', 'is_mem', 'is_skr', 'is_sec', 'is_ldr']\n    list_filter = ['username', 'is_mem', 'is_skr', 'is_sec', 'is_ldr']\n    search_fields = ['username']\n@admin.register(models.Profile)\nclass ProfileAdmin(admin.ModelAdmin):\n    list_display = ['user', 'surname',\n                    'entrance_number', 'email', 'birthday', 'contact']\n    list_filter = ['user', 'surname',\n                   'entrance_number', 'email', 'birthday', 'contact']",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "ProfileAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class ProfileAdmin(admin.ModelAdmin):\n    list_display = ['user', 'surname',\n                    'entrance_number', 'email', 'birthday', 'contact']\n    list_filter = ['user', 'surname',\n                   'entrance_number', 'email', 'birthday', 'contact']\n    search_fields = ['user__username', 'surname']\n@admin.register(models.Group)\nclass GroupAdmin(admin.ModelAdmin):\n    list_display = ['name', 'id',  'address', 'telephone', 'email']\n    list_filter = ['id', 'name']",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "GroupAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class GroupAdmin(admin.ModelAdmin):\n    list_display = ['name', 'id',  'address', 'telephone', 'email']\n    list_filter = ['id', 'name']\n@admin.register(models.UserFile)\nclass GroupAdmin(admin.ModelAdmin):\n    list_display = ['user']\n    list_filter = ['user']\n    search_fields = ['user']\n@admin.register(models.MemberRole)\nclass UserRolesAdmin(admin.ModelAdmin):",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "GroupAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class GroupAdmin(admin.ModelAdmin):\n    list_display = ['user']\n    list_filter = ['user']\n    search_fields = ['user']\n@admin.register(models.MemberRole)\nclass UserRolesAdmin(admin.ModelAdmin):\n    list_display = ['id', 'profile', 'role',  'active', 'start', 'end']\n    list_filter = ['id', 'profile', 'role',  'active', 'start', 'end']\n    search_fields = ['profile__user__username', 'role__name']\n@admin.register(models.Message)",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "UserRolesAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class UserRolesAdmin(admin.ModelAdmin):\n    list_display = ['id', 'profile', 'role',  'active', 'start', 'end']\n    list_filter = ['id', 'profile', 'role',  'active', 'start', 'end']\n    search_fields = ['profile__user__username', 'role__name']\n@admin.register(models.Message)\nclass MessageAdmin(admin.ModelAdmin):\n    list_display = ['id', 'sender', 'receiver', 'date']\n    list_filter = ['id', 'sender', 'receiver', 'date']\n    search_fields = ['date']\n@admin.register(models.MembershipFee)",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "MessageAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class MessageAdmin(admin.ModelAdmin):\n    list_display = ['id', 'sender', 'receiver', 'date']\n    list_filter = ['id', 'sender', 'receiver', 'date']\n    search_fields = ['date']\n@admin.register(models.MembershipFee)\nclass MembershipFeeAdmin(admin.ModelAdmin):\n    list_display = ['member', 'amount', 'for_year', 'date', 'is_paid']\n    list_filter = ['member', 'amount', 'for_year', 'date', 'is_paid']\n    search_fields = ['member__user__username', 'for_year']\n@admin.register(models.Complete)",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "MembershipFeeAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class MembershipFeeAdmin(admin.ModelAdmin):\n    list_display = ['member', 'amount', 'for_year', 'date', 'is_paid']\n    list_filter = ['member', 'amount', 'for_year', 'date', 'is_paid']\n    search_fields = ['member__user__username', 'for_year']\n@admin.register(models.Complete)\nclass CompleteAdmin(admin.ModelAdmin):\n    list_display = ('id', 'user', 'examiner', 'requirement',\n                    'applied', 'completed', 'stage')\n    list_filter = ('stage',)\n    search_fields = ('user__user__username',",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "CompleteAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class CompleteAdmin(admin.ModelAdmin):\n    list_display = ('id', 'user', 'examiner', 'requirement',\n                    'applied', 'completed', 'stage')\n    list_filter = ('stage',)\n    search_fields = ('user__user__username',\n                     'examiner__user__username', 'requirement__name')\n    def save_model(self, request, obj, form, change):\n        if not change:\n            obj.user = request.user.profile\n        super().save_model(request, obj, form, change)",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "LeaderAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class LeaderAdmin(admin.ModelAdmin):\n    list_display = ('name', 'patrol', 'start', 'end', 'is_active')\n    list_filter = ('patrol', 'is_active')\n    search_fields = ('name__user__username', 'patrol__name')\n@admin.register(LogEntry)\nclass LogEntryAdmin(admin.ModelAdmin):\n    # to have a date-based drilldown navigation in the admin page\n    date_hierarchy = 'action_time'\n    # to filter the resultes by users, content types and action flags\n    list_filter = [",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "LogEntryAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class LogEntryAdmin(admin.ModelAdmin):\n    # to have a date-based drilldown navigation in the admin page\n    date_hierarchy = 'action_time'\n    # to filter the resultes by users, content types and action flags\n    list_filter = [\n        'user',\n        'content_type',\n        'action_flag'\n    ]\n    # when searching the user will be able to search in both object_repr and change_message",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "core.apps",
        "description": "core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "core.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class User(AbstractUser):\n    username_validator = RegexValidator('^.*$', 'Invalid username')\n    username = models.CharField(\n        max_length=150,\n        unique=True,\n        validators=[username_validator],\n        error_messages={\n            'unique': 'A user with that username already exists.',\n        },\n    )",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    surname = models.CharField(max_length=50, blank=True)\n    initials = models.CharField(max_length=10, blank=True)\n    entrance_number = models.CharField(max_length=10, blank=True)\n    email = models.EmailField(max_length=254, blank=True)\n    father = models.CharField(max_length=50, blank=True)\n    skills = models.CharField(max_length=50, blank=True)\n    sports = models.CharField(max_length=50, blank=True)\n    birthday = models.DateField(null=True, blank=True)",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class Group(models.Model):\n    name = models.CharField(max_length=50, blank=False)\n    address = models.CharField(max_length=100, null=True, blank=True)\n    telephone = models.CharField(max_length=11, null=True, blank=True)\n    email = models.EmailField(max_length=254, blank=True)\n    about = models.TextField(max_length=1000, blank=True)\n    fee = models.IntegerField(blank=True, null=True)\n    def __str__(self):\n        return self.name\n\"\"\"  Member roles \"\"\"",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MemberRole",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class MemberRole(models.Model):\n    profile = models.ForeignKey(\n        Profile, on_delete=models.SET_DEFAULT, default=2)\n    role = models.IntegerField(choices=ROLES, blank=True)\n    active = models.BooleanField(default=True)\n    start = models.DateField(auto_now_add=True, blank=True)\n    end = models.DateField(auto_now=True, null=True, blank=True)\n    def __str__(self):\n        return self.role.__str__() + ' | ' + self.profile.user.username\n\"\"\"  user files \"\"\"",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserFile",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class UserFile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    def profile_image_upload_path(instance, filename):\n        return f'img/profile/{filename}'\n    picture = models.ImageField(\n        upload_to=profile_image_upload_path, blank=True)\n    def profile_letter_upload_path(instance, filename):\n        return f'files/letter/{filename}'\n    letter = models.FileField(upload_to=profile_letter_upload_path, blank=True)\n    def profile_medical_upload_path(instance, filename):",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Complete",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class Complete(models.Model):\n    user = models.ForeignKey(Profile, on_delete=models.CASCADE)\n    examiner = models.ForeignKey(\n        Profile, on_delete=models.CASCADE, null=True, blank=True, related_name='examiner')\n    requirement = models.ForeignKey(Requirement, on_delete=models.CASCADE)\n    applied = models.DateField(blank=False, auto_now_add=True)\n    completed = models.DateField(blank=True, null=True)\n    stage = models.IntegerField(choices=COMPLETE_CHOICES, validators=[\n                                MinValueValidator(1)], blank=False)\n    class Meta:",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Leader",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class Leader(models.Model):\n    name = models.ForeignKey(Profile, on_delete=models.CASCADE)\n    start = models.DateField(auto_now_add=True, blank=False)\n    end = models.DateField(blank=True, null=True)\n    patrol = models.ForeignKey(\n        Patrol, on_delete=models.SET_NULL, null=True, blank=True)\n    is_active = models.BooleanField(default=True)\n    def __str__(self):\n        return self.patrol.name + ' | ' + self.name.user.username\n\"\"\"  message model \"\"\"",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class Message(Communication):\n    sender = models.ForeignKey(User, on_delete=models.CASCADE)\n    receiver = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name='receiver')\n    content = models.CharField(max_length=50, blank=False)\n    date = models.DateField(blank=False)\n    def __str__(self):\n        return self.title\n\"\"\" Membership Fee Modal \"\"\"\nclass MembershipFee(models.Model):",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "MembershipFee",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class MembershipFee(models.Model):\n    member = models.ForeignKey(\n        Profile, on_delete=models.CASCADE, blank=False)\n    amount = models.DecimalField(\n        max_digits=5, decimal_places=2, blank=False, validators=[MinValueValidator(0)])\n    for_year = models.DateField(blank=False)\n    date = models.DateField(auto_now_add=True, blank=False)\n    is_paid = models.BooleanField(default=False)\n    def __str__(self):\n        return str(self.member)",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "ROLES",
        "kind": 5,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "ROLES = {\n    (1, 'Admin'),\n    (2, 'Member'),\n    (3, 'Secretary'),\n    (4, 'Storekeeper'),\n}\nclass MemberRole(models.Model):\n    profile = models.ForeignKey(\n        Profile, on_delete=models.SET_DEFAULT, default=2)\n    role = models.IntegerField(choices=ROLES, blank=True)",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "COMPLETE_CHOICES",
        "kind": 5,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "COMPLETE_CHOICES = [(1, 'Applied'), (2, 'Pass'), (3, 'Fail')]\nclass Complete(models.Model):\n    user = models.ForeignKey(Profile, on_delete=models.CASCADE)\n    examiner = models.ForeignKey(\n        Profile, on_delete=models.CASCADE, null=True, blank=True, related_name='examiner')\n    requirement = models.ForeignKey(Requirement, on_delete=models.CASCADE)\n    applied = models.DateField(blank=False, auto_now_add=True)\n    completed = models.DateField(blank=True, null=True)\n    stage = models.IntegerField(choices=COMPLETE_CHOICES, validators=[\n                                MinValueValidator(1)], blank=False)",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "set_username",
        "kind": 2,
        "importPath": "core.signals",
        "description": "core.signals",
        "peekOfCode": "def set_username(sender, instance, created, **kwargs):\n    if created:\n        instance.username = generate_username()\n        instance.save()\nmodels.signals.pre_save.connect(set_username, sender=User)",
        "detail": "core.signals",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "core.signals",
        "description": "core.signals",
        "peekOfCode": "User = get_user_model()\n# auto username signal before save\n@receiver(pre_save, sender=User)\ndef set_username(sender, instance, created, **kwargs):\n    if created:\n        instance.username = generate_username()\n        instance.save()\nmodels.signals.pre_save.connect(set_username, sender=User)",
        "detail": "core.signals",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "app_name = 'core'\nurlpatterns = [\n]",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n]",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "session_processor",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def session_processor(request):\n    # get the user id from the session\n    user_id = request.session.get('_auth_user_id')\n    #print(f'User id is -- {user_id}')\n    try:\n        user = User.objects.get(id=user_id)\n        troop_leader = user.is_ldr\n        if (troop_leader):\n            request.session['is_troopleader'] = True\n        print(troop_leader)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "LoginConfig",
        "kind": 6,
        "importPath": "login.apps",
        "description": "login.apps",
        "peekOfCode": "class LoginConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'login'",
        "detail": "login.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "login.urls",
        "description": "login.urls",
        "peekOfCode": "app_name = 'home'\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('view/register/', views.signup, name='signup'),\n    path('view/events/', views.events, name='events'),\n    path('view/requirements/', views.requirements, name='requirements'),\n    path('register/', views.register, name='register'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('test/', views.MyCardView.as_view(), name='test'),",
        "detail": "login.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "login.urls",
        "description": "login.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.home, name='home'),\n    path('view/register/', views.signup, name='signup'),\n    path('view/events/', views.events, name='events'),\n    path('view/requirements/', views.requirements, name='requirements'),\n    path('register/', views.register, name='register'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('test/', views.MyCardView.as_view(), name='test'),\n]",
        "detail": "login.urls",
        "documentation": {}
    },
    {
        "label": "generate_username",
        "kind": 2,
        "importPath": "login.utils",
        "description": "login.utils",
        "peekOfCode": "def generate_username():\n    \"\"\" generate username \"\"\"\n    current_year = time.strftime(\"%Y\")\n    # this year joined count\n    count = User.objects.filter(date_joined__year=current_year).count()\n    # base username\n    base_username = f'SC/{current_year}/{count+1}'\n    # Check if the base username already exists\n    if User.objects.filter(username=base_username).exists():\n        # If the base username already exists, add a suffix to make it unique",
        "detail": "login.utils",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "login.utils",
        "description": "login.utils",
        "peekOfCode": "User = get_user_model()\ndef generate_username():\n    \"\"\" generate username \"\"\"\n    current_year = time.strftime(\"%Y\")\n    # this year joined count\n    count = User.objects.filter(date_joined__year=current_year).count()\n    # base username\n    base_username = f'SC/{current_year}/{count+1}'\n    # Check if the base username already exists\n    if User.objects.filter(username=base_username).exists():",
        "detail": "login.utils",
        "documentation": {}
    },
    {
        "label": "MyCardView",
        "kind": 6,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "class MyCardView(ListView):\n    model = Photo\n    template_name = 'events'\n    context_object_name = 'photos'\n    paginate_by = 2",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def home(request):\n    \"\"\" view login page \"\"\"\n    try:\n        group = Group.objects.filter(id=1).values()\n        context = {\n            'title': 'home',\n            'group': group,\n        }\n    except Exception as e:\n        print(e)",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def signup(request):\n    \"\"\" view signup page \"\"\"\n    try:\n        username = generate_username()\n        # pass data to  context\n        context = {\n            'title': 'register',\n            'next_id': username\n        }\n    except Exception as e:",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def register(request):\n    \"\"\" register user and profile \"\"\"\n    try:\n        context = {}\n        if request.method == \"POST\":\n            with transaction.atomic():\n                # variables request.POST\n                student_surname = request.POST.get('student_surname')\n                student_initials = request.POST.get('student_initials')\n                student_birthday = request.POST.get('student_birthday')",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "user_login",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def user_login(request):\n    \"\"\" call auth login function \"\"\"\n    try:\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            #next_url = request.POST.get('next', '/')\n            # return redirect(next_url)",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "user_logout",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def user_logout(request):\n    \"\"\" call auth logout function \"\"\"\n    try:\n        logout(request)\n        return redirect(reverse('home:home'))\n    except Exception as e:\n        print(e)\ndef events(request):\n    \"\"\" view home events \"\"\"\n    try:",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "events",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def events(request):\n    \"\"\" view home events \"\"\"\n    try:\n        photos = Photo.objects.all().order_by('-date')\n        context = {\n            'title': 'events',\n            'photos': photos,\n        }\n    except Exception as e:\n        print(e)",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "requirements",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def requirements(request):\n    \"\"\" view requirements page \"\"\"\n    try:\n        requires = Requirement.objects.all().select_related('badge')\\\n            .values(\n            'badge__level', 'badge__name', 'badge__description', 'number', 'name', 'description')\\\n            .order_by('badge__level', 'number')\n        context = {\n            'title': 'badges',\n            'requires': requires,",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "User = get_user_model()\n# current active user model\ndef home(request):\n    \"\"\" view login page \"\"\"\n    try:\n        group = Group.objects.filter(id=1).values()\n        context = {\n            'title': 'home',\n            'group': group,\n        }",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "manager.migrations.0001_initial",
        "description": "manager.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Announcement',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=50)),",
        "detail": "manager.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "manager.migrations.0002_alter_photo_description",
        "description": "manager.migrations.0002_alter_photo_description",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('manager', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='photo',\n            name='description',\n            field=models.TextField(),\n        ),",
        "detail": "manager.migrations.0002_alter_photo_description",
        "documentation": {}
    },
    {
        "label": "PostAdmin",
        "kind": 6,
        "importPath": "manager.admin",
        "description": "manager.admin",
        "peekOfCode": "class PostAdmin(admin.ModelAdmin):\n    list_display = ['title', 'date']\n    list_filter = ['title', 'date']\n    search_fields = ['date', 'title']\n@admin.register(models.Photo)\nclass PhotosAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title',\n                    'date', 'location']\n    list_filter = ['id', 'title',\n                   'date', 'location']",
        "detail": "manager.admin",
        "documentation": {}
    },
    {
        "label": "PhotosAdmin",
        "kind": 6,
        "importPath": "manager.admin",
        "description": "manager.admin",
        "peekOfCode": "class PhotosAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title',\n                    'date', 'location']\n    list_filter = ['id', 'title',\n                   'date', 'location']\n    search_fields = ['date', 'title']\n@admin.register(models.Patrol)\nclass PatrolAdmin(admin.ModelAdmin):\n    list_display = ['name']\n    list_filter = ['name']",
        "detail": "manager.admin",
        "documentation": {}
    },
    {
        "label": "PatrolAdmin",
        "kind": 6,
        "importPath": "manager.admin",
        "description": "manager.admin",
        "peekOfCode": "class PatrolAdmin(admin.ModelAdmin):\n    list_display = ['name']\n    list_filter = ['name']\n    search_fields = ['name']\n@admin.register(models.Announcement)\nclass AnnouncementAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title', 'date']\n    list_filter = ['id', 'title', 'date']\n    search_fields = ['date']",
        "detail": "manager.admin",
        "documentation": {}
    },
    {
        "label": "AnnouncementAdmin",
        "kind": 6,
        "importPath": "manager.admin",
        "description": "manager.admin",
        "peekOfCode": "class AnnouncementAdmin(admin.ModelAdmin):\n    list_display = ['id', 'title', 'date']\n    list_filter = ['id', 'title', 'date']\n    search_fields = ['date']",
        "detail": "manager.admin",
        "documentation": {}
    },
    {
        "label": "ManagerConfig",
        "kind": 6,
        "importPath": "manager.apps",
        "description": "manager.apps",
        "peekOfCode": "class ManagerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'manager'",
        "detail": "manager.apps",
        "documentation": {}
    },
    {
        "label": "RequirementForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class RequirementForm(forms.ModelForm):\n    badge = forms.ModelChoiceField(queryset=Badge.objects.all(),\n                                   widget=forms.Select(\n        attrs={'class': 'form-control selectize', 'placeholder': 'Select the badge'}))\n    description = forms.CharField(widget=forms.Textarea(\n        attrs={'rows': 3, 'class': 'py-2'}))\n    class Meta:\n        model = Requirement\n        fields = \"__all__\"\n\"\"\" Badge form \"\"\"",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "BadgeForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class BadgeForm(forms.ModelForm):\n    description = forms.CharField(widget=forms.Textarea(attrs={'rows': 3}))\n    class Meta:\n        model = Badge\n        fields = \"__all__\"\n\"\"\" hike form \"\"\"\nclass HikeForm(forms.ModelForm):\n    class Meta:\n        model = Hike\n        fields = ['title', 'description', 'year', 'date',",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "HikeForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class HikeForm(forms.ModelForm):\n    class Meta:\n        model = Hike\n        fields = ['title', 'description', 'year', 'date',\n                  'time', 'nights', 'is_day', 'location']\n        widgets = {\n            'year': YearPickerInput(),\n            'date': forms.DateInput(format='%Y/%m/%d', attrs={'type': 'date'}),\n            'time': forms.TimeInput(format='%H', attrs={'type': 'time'}),\n        }",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "ProjectForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class ProjectForm(forms.ModelForm):\n    class Meta:\n        model = Project\n        fields = ['title', 'description', 'date', 'time', 'location']\n        widgets = {\n            'date': forms.DateInput(format='%Y/%m/%d', attrs={'type': 'date', 'class': 'form-control'}),\n            'time': forms.TimeInput(format='%H', attrs={'type': 'time', 'class': 'form-control'}),\n        }\n\"\"\" camp form \"\"\"\nclass CampForm(forms.ModelForm):",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "CampForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class CampForm(forms.ModelForm):\n    class Meta:\n        model = Camp\n        fields = ['title', 'description', 'date', 'time', 'nights',\n                  'is_day', 'is_overseas', 'country', 'location']\n        widgets = {\n            'date': forms.DateInput(format='%Y/%m/%d', attrs={'type': 'date'}),\n            'time': forms.TimeInput(format='%H', attrs={'type': 'time'}),\n        }\n\"\"\" upload Photo form  \"\"\"",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "UploadPhotoForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class UploadPhotoForm(forms.ModelForm):\n    class Meta:\n        model = Photo\n        fields = ['title', 'description', 'date', 'location', 'file',]\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 3}),\n            'date': forms.DateInput(\n                format='%Y/%m/%d', attrs={'type': 'date'})\n        }\n\"\"\" upload posts form \"\"\"",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "UploadPostsForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class UploadPostsForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'description', 'file', 'picture']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 10}),\n            'file': forms.FileInput(attrs={'class': 'form-control-file', 'Multiple': True}),\n        }\n\"\"\" Announce form \"\"\"\nclass AnnounceForm(forms.ModelForm):",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "AnnounceForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class AnnounceForm(forms.ModelForm):\n    class Meta:\n        model = Announcement\n        fields = ['title', 'content', 'file']\n        widgets = {\n            'content': forms.Textarea(attrs={'rows': 5}),\n        }\n\"\"\" Add Assign Members to Patrol form \"\"\"\nclass AssignPatrolForm(forms.Form):\n    member = forms.ModelChoiceField(queryset=Profile.objects.all(),",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "AssignPatrolForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class AssignPatrolForm(forms.Form):\n    member = forms.ModelChoiceField(queryset=Profile.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'class': 'form-control selectize', 'placeholder': 'select member'}))\n    patrol = forms.ModelChoiceField(queryset=Patrol.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'id': 'assign_patrol', 'class': 'form-control selectize', 'placeholder': 'select patrol'}))\n\"\"\" Member Activation / Deactivate form \"\"\"\nclass ActivateMemberForm(forms.Form):\n    member = forms.ModelChoiceField(queryset=User.objects.all(),",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "ActivateMemberForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class ActivateMemberForm(forms.Form):\n    member = forms.ModelChoiceField(queryset=User.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'class': 'form-control selectize ', 'placeholder': 'select member'})\n                                    )\n    active = forms.BooleanField(required=False, widget=forms.CheckboxInput(\n        attrs={'id': 'a_m_member', 'data-toggle': 'toggle', 'data-style': 'ios'}))\n\"\"\" Member Membership Fee form \"\"\"\nclass MembershipFeeForm(forms.ModelForm):\n    class Meta:",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "MembershipFeeForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class MembershipFeeForm(forms.ModelForm):\n    class Meta:\n        model = MembershipFee\n        fields = '__all__'\n        widgets = {\n            'member': forms.Select(\n                attrs={'id': 'a_f_member', 'class': 'form-control  selectize ', 'placeholder': 'select member'}),\n            'for_year': YearPickerInput(),\n            'amount': forms.NumberInput(attrs={'class': 'form-control', 'min': 0, 'placeholder': 'Rs.100'}),\n        }",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "AssignRoleForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class AssignRoleForm(forms.Form):\n    role = forms.ChoiceField(choices=ROLES, widget=forms.Select(\n        attrs={'id': 'rf_select_role', 'class': 'form-control selectize '}))\n    profile = forms.ModelChoiceField(queryset=Profile.objects.all(), widget=forms.Select(\n        attrs={'id': 'rf_select_profile', 'class': 'form-control selectize ', 'placeholder': 'select profile'}))\n\"\"\" Assign Leader form  \"\"\"\nclass AssignLeaderForm(forms.ModelForm):\n    class Meta:\n        model = Leader\n        fields = ['name', 'patrol']",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "AssignLeaderForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class AssignLeaderForm(forms.ModelForm):\n    class Meta:\n        model = Leader\n        fields = ['name', 'patrol']\n        widgets = {\n            'name': forms.Select(attrs={'class': 'form-control selectize', 'placeholder': 'select member'}),\n            'patrol': forms.Select(attrs={'class': 'form-control selectize', 'placeholder': 'select patrol'}),\n        }\n        initial = {'name': '', 'patrol': ''}\n\"\"\" Patrol forms \"\"\"",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "AddPatrolForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class AddPatrolForm(forms.ModelForm):\n    class Meta:\n        model = Patrol\n        fields = ['name']\nclass EndPatrolForm(forms.Form):\n    patrol = forms.ModelChoiceField(queryset=Patrol.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'class': 'form-control selectize ', 'id': 'end-form-select-patrol', 'placeholder': 'select patrol'}))",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "EndPatrolForm",
        "kind": 6,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "class EndPatrolForm(forms.Form):\n    patrol = forms.ModelChoiceField(queryset=Patrol.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'class': 'form-control selectize ', 'id': 'end-form-select-patrol', 'placeholder': 'select patrol'}))",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "User = get_user_model()\n\"\"\" Requirements form \"\"\"\nclass RequirementForm(forms.ModelForm):\n    badge = forms.ModelChoiceField(queryset=Badge.objects.all(),\n                                   widget=forms.Select(\n        attrs={'class': 'form-control selectize', 'placeholder': 'Select the badge'}))\n    description = forms.CharField(widget=forms.Textarea(\n        attrs={'rows': 3, 'class': 'py-2'}))\n    class Meta:\n        model = Requirement",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "ROLES",
        "kind": 5,
        "importPath": "manager.forms",
        "description": "manager.forms",
        "peekOfCode": "ROLES = {\n    (2, 'Member'),\n    (3, 'Secretary'),\n    (4, 'Storekeeper'),\n}\nclass AssignRoleForm(forms.Form):\n    role = forms.ChoiceField(choices=ROLES, widget=forms.Select(\n        attrs={'id': 'rf_select_role', 'class': 'form-control selectize '}))\n    profile = forms.ModelChoiceField(queryset=Profile.objects.all(), widget=forms.Select(\n        attrs={'id': 'rf_select_profile', 'class': 'form-control selectize ', 'placeholder': 'select profile'}))",
        "detail": "manager.forms",
        "documentation": {}
    },
    {
        "label": "Photo",
        "kind": 6,
        "importPath": "manager.models",
        "description": "manager.models",
        "peekOfCode": "class Photo(models.Model):\n    \"\"\"  home photo page \"\"\"\n    title = models.CharField(max_length=50, blank=False)\n    description = models.TextField()\n    date = models.DateField(blank=False)\n    location = models.CharField(max_length=50, blank=False)\n    file = models.ImageField(upload_to='photos', blank=False)\n    def __str__(self):\n        return self.title\nclass Post(models.Model):",
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "manager.models",
        "description": "manager.models",
        "peekOfCode": "class Post(models.Model):\n    \"\"\"  saturday posts \"\"\"\n    title = models.CharField(max_length=100, blank=False)\n    description = models.TextField()\n    date = models.DateField(auto_now_add=True, blank=False)\n    file = models.FileField(upload_to='posts/files', blank=True)\n    picture = models.ImageField(upload_to='posts/image', blank=True)\n    def __str__(self):\n        return f'{self.id} | {self.date}'\nclass Patrol(models.Model):",
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Patrol",
        "kind": 6,
        "importPath": "manager.models",
        "description": "manager.models",
        "peekOfCode": "class Patrol(models.Model):\n    \"\"\"  patrol model \"\"\"\n    name = models.CharField(max_length=50, blank=False, unique=True)\n    def __str__(self):\n        return self.name\n    # start = models.DateField(auto_now_add=True, blank=False)\n    # end = models.DateField(blank=True, null=True)\n    # is_active = models.BooleanField(default=True)\nclass Communication(models.Model):\n    \"\"\"  Send model with abstract class for sending messages and announcements \"\"\"",
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Communication",
        "kind": 6,
        "importPath": "manager.models",
        "description": "manager.models",
        "peekOfCode": "class Communication(models.Model):\n    \"\"\"  Send model with abstract class for sending messages and announcements \"\"\"\n    class Meta:\n        abstract = True\nclass Announcement(Communication):\n    \"\"\" Model Announcements for members \"\"\"\n    title = models.CharField(max_length=50, blank=False)\n    content = models.TextField(blank=False)\n    date = models.DateField(auto_now_add=True, blank=False)\n    file = models.FileField(upload_to='announce', blank=True)",
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "Announcement",
        "kind": 6,
        "importPath": "manager.models",
        "description": "manager.models",
        "peekOfCode": "class Announcement(Communication):\n    \"\"\" Model Announcements for members \"\"\"\n    title = models.CharField(max_length=50, blank=False)\n    content = models.TextField(blank=False)\n    date = models.DateField(auto_now_add=True, blank=False)\n    file = models.FileField(upload_to='announce', blank=True)\n    def __str__(self):\n        return self.title",
        "detail": "manager.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "manager.urls",
        "description": "manager.urls",
        "peekOfCode": "app_name = 'manager'\nurlpatterns = [\n    path('view/', views.manage_view, name='main'),\n    path('events/', views.manage_events, name='events'),\n    path('wall/', views.manage_wall, name='manage_wall'),\n    path('welcome/', views.manage_patrols, name='manage_patrols'),\n    path('announce/', views.manage_announcements, name='manage_announce'),\n    path('badge/', views.manage_badges, name='manage_badges'),\n    # code for manage roles in views\n    path('role/', views.manage_roles, name='manage_roles'),",
        "detail": "manager.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "manager.urls",
        "description": "manager.urls",
        "peekOfCode": "urlpatterns = [\n    path('view/', views.manage_view, name='main'),\n    path('events/', views.manage_events, name='events'),\n    path('wall/', views.manage_wall, name='manage_wall'),\n    path('welcome/', views.manage_patrols, name='manage_patrols'),\n    path('announce/', views.manage_announcements, name='manage_announce'),\n    path('badge/', views.manage_badges, name='manage_badges'),\n    # code for manage roles in views\n    path('role/', views.manage_roles, name='manage_roles'),\n    path('role/tog/', views.toggle_role, name='toggle_roles'),",
        "detail": "manager.urls",
        "documentation": {}
    },
    {
        "label": "add_attendance",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_attendance(request):\n    \"\"\" ajax add Attendance \"\"\"\n    try:\n        if request.method == 'POST':\n            # check and get variables\n            print(\"Form submitted:\")\n            print(\"----------------\")\n            title = request.POST.get('title')\n            # marker = request.POST.get('marker')\n            marker = request.session.get('_auth_user_id')",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "view_attendance",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def view_attendance(request):\n    profile = Profile.objects.get(user=request.user)\n    members = Profile.objects.filter().all()\n    attends = Attendance.objects.filter(\n        member__in=members).select_related('user')\\\n        .values(\n            'title', 'marker__user__username', 'date', 'member__user__username', 'time'\n    )\\\n        .order_by('-date')\n    form = AttendanceForm(",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_roles",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_roles(request):\n    activate_form = AssignRoleForm(initial={'role': 2})\n    context = {\n        'title': 'manage_roles',\n        'activate_form': activate_form,\n        'roles': MemberRole.objects.all(),\n    }\n    return render(request, 'manager/manage_role', context)\n\"\"\" manage leaders \"\"\"\n@ login_required",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_leaders",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_leaders(request):\n    leader_form = AssignLeaderForm()\n    leaders = Leader.objects.all()\n    context = {\n        'title': 'manage_leaders',\n        'leader_form': leader_form,\n        'leaders': leaders,\n    }\n    return render(request, 'manager/manage_leader', context)\n\"\"\" add membership fee \"\"\"",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_membership_fee",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_membership_fee(request):\n    if request.method == 'POST':\n        response_data = {}\n        membershipFeeForm = MembershipFeeForm(request.POST)\n        if membershipFeeForm.is_valid():\n            amount = int(request.POST.get('amount'))\n            for_year = request.POST.get('for_year')\n            profile = int(request.POST.get('member'))\n            is_paid = bool(request.POST.get('is_paid'))\n            try:",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "activate_member",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def activate_member(request):\n    if request.method == 'POST':\n        response_data = {}\n        activateForm = ActivateMemberForm(request.POST)\n        if activateForm.is_valid():\n            is_active = bool(request.POST.get('active'))\n            member = int(request.POST.get('member'))\n            member = User.objects.get(id=member)\n            member.is_active = is_active\n            member.save()",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "get_announce",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def get_announce(request):\n    announcements = Announcement.objects.all()\n    announcements = list(announcements.values())\n    return JsonResponse(announcements, safe=False)\n\"\"\" ajax add announcement \"\"\"\n@login_required()\ndef add_announce(request):\n    if request.method == 'POST':\n        response_data = {}\n        announceForm = AnnounceForm(request.POST, request.FILES)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_announce",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_announce(request):\n    if request.method == 'POST':\n        response_data = {}\n        announceForm = AnnounceForm(request.POST, request.FILES)\n        if announceForm.is_valid():\n            title = request.POST.get('title')\n            content = request.POST.get('content')\n            file = request.FILES.get('file')\n            announcement = Announcement.objects.create(\n                title=title, content=content, file=file)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "assign_patrol",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def assign_patrol(request):\n    if request.method == 'POST':\n        response_data = {}\n        assignForm = AssignPatrolForm(request.POST)\n        if assignForm.is_valid():\n            patrol = request.POST.get('patrol')\n            member = request.POST.get('member')\n            patrol = Patrol.objects.get(id=patrol)\n            profile = Profile.objects.get(id=member)\n            profile.patrol = patrol",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "rm_leader",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def rm_leader(request):\n    if request.method == 'POST':\n        response_data = {}\n        patrolForm = AddPatrolForm(request.POST)\n        print(patrolForm.errors)\n        if patrolForm.is_valid():\n            patrolForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "toggle_leader",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def toggle_leader(request):\n    if request.method == 'POST':\n        response_data = {}\n        name = int(request.POST.get('name'))\n        patrol = int(request.POST.get('patrol'))\n        form = AssignLeaderForm(request.POST)\n        if form.is_valid():\n            name = Profile.objects.get(id=name)\n            patrol = Patrol.objects.get(id=patrol)\n            print(name)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "get_roles",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def get_roles(request):\n    roles = MemberRole.objects.all()\n    roles = list(roles.values())\n    return JsonResponse(roles, safe=False)\n\"\"\" ajax add role to role list \"\"\"\ndef set_auth_role(profile, role):\n    try:\n        #user = User.objects.get(id=profile.user)\n        user = profile.user\n        print('user is - ' + str(user))",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "set_auth_role",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def set_auth_role(profile, role):\n    try:\n        #user = User.objects.get(id=profile.user)\n        user = profile.user\n        print('user is - ' + str(user))\n        mr = MemberRole.objects.get(profile=profile, role=role)\n        print(mr.pk)\n        print(f'mr is - {str(mr.pk)} \\t {mr.role} \\t {mr.active}')\n        active = mr.active\n        if (role == 1):",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "toggle_role",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def toggle_role(request):\n    if request.method == 'POST':\n        response_data = {}\n        profile = int(request.POST.get('profile'))\n        role = request.POST.get('role')\n        form = AssignRoleForm(request.POST)\n        if form.is_valid():\n            print('form is valid')\n            profile = Profile.objects.get(id=profile)\n            val = Profile.objects.filter(id=profile.id).values()",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_patrol",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_patrol(request):\n    if request.method == 'POST':\n        response_data = {}\n        patrolForm = AddPatrolForm(request.POST)\n        print(patrolForm.errors)\n        if patrolForm.is_valid():\n            patrolForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "get_profiles",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def get_profiles(request):\n    if request.method == 'POST':\n        profiles = Profile.objects.all()\n        profiles = list(profiles.values())\n        return JsonResponse(profiles, safe=False)\n\"\"\" delete patrol from patrol list \"\"\"\n@login_required()\ndef del_patrol(request):\n    try:\n        if request.method == 'POST':",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "del_patrol",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def del_patrol(request):\n    try:\n        if request.method == 'POST':\n            response_data = {}\n            patrolForm = EndPatrolForm(request.POST)\n            if patrolForm.is_valid():\n                patrol = request.POST.get('patrol')\n                patrol = Patrol.objects.get(id=patrol)\n                patrol.delete()\n                response_data['result'] = 'success'",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "get_patrol",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def get_patrol(request):\n    patrols = Patrol.objects.all().values()\n    return JsonResponse(list(patrols), safe=False)\n\"\"\" ajax add badge to badge list \"\"\"\n@login_required()\ndef add_badge(request):\n    if request.method == 'POST':\n        response_data = {}\n        badgeForm = BadgeForm(request.POST)\n        if badgeForm.is_valid():",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_badge",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_badge(request):\n    if request.method == 'POST':\n        response_data = {}\n        badgeForm = BadgeForm(request.POST)\n        if badgeForm.is_valid():\n            badgeForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),\n        )",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "get_badges",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def get_badges(request):\n    badges = Badge.objects.all().values()\n    return JsonResponse(list(badges), safe=False)\n\"\"\" ajax add requirement to requirement list \"\"\"\n@login_required()\ndef add_requirement(request):\n    if request.method == 'POST':\n        response_data = {}\n        requirementForm = RequirementForm(request.POST)\n        print(requirementForm.errors)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_requirement",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_requirement(request):\n    if request.method == 'POST':\n        response_data = {}\n        requirementForm = RequirementForm(request.POST)\n        print(requirementForm.errors)\n        if requirementForm.is_valid():\n            requirementForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "get_requirements",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def get_requirements(request):\n    requirements = Requirement.objects.all().select_related('badge').values(\n        'id', 'number', 'badge__name', 'name', 'description').order_by('badge__level', 'number')\n    return JsonResponse(list(requirements), safe=False)\n\"\"\" ajax add photo event to home wall \"\"\"\n@login_required()\ndef add_photo(request):\n    if request.method == 'POST':\n        response_data = {}\n        photoForm = UploadPhotoForm(request.POST, request.FILES)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_photo",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_photo(request):\n    if request.method == 'POST':\n        response_data = {}\n        photoForm = UploadPhotoForm(request.POST, request.FILES)\n        print(photoForm.is_valid())\n        print(photoForm.errors)\n        if photoForm.is_valid():\n            photoForm.save()\n            response_data['result'] = 'success'\n            print(response_data)",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_post",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_post(request):\n    if request.method == 'POST':\n        response_data = {}\n        postForm = UploadPostsForm(request.POST, request.FILES)\n        print(postForm.errors)\n        if postForm.is_valid():\n            postForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_hike",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_hike(request):\n    response_data['result'] = 'not loaded'\n    if request.method == 'POST':\n        response_data = {}\n        form = HikeForm(request.POST)\n        print(form)\n        if form.is_valid():\n            form.save()\n            response_data['result'] = 'success'\n        return HttpResponse(",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_camp",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_camp(request):\n    if request.method == 'POST':\n        response_data = {}\n        form = CampForm(request.POST)\n        print(form)\n        if form.is_valid():\n            form.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "add_project",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def add_project(request):\n    if request.method == 'POST':\n        response_data = {}\n        form = ProjectForm(request.POST)\n        print(form.is_valid())\n        if form.is_valid():\n            form.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_view",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_view(request):\n    hikes = Hike.objects.all()\n    projects = Project.objects.all()\n    camps = Camp.objects.all()\n    context = {\n        'title': 'manage_view',\n        'hikes': hikes,\n        'projects': projects,\n        'camps': camps,\n    }",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_events",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_events(request):\n    hikes = HikeForm()\n    camps = CampForm()\n    projects = ProjectForm()\n    context = {\n        'title': 'manage_edit',\n        'hikes': hikes,\n        'camps': camps,\n        'projects': projects,\n    }",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_wall",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_wall(request):\n    posts = UploadPostsForm()\n    photo = UploadPhotoForm()\n    context = {\n        'title': 'manage_wall',\n        'posts': posts,\n        'photo': photo,\n    }\n    return render(request, 'manager/manage_wall', context)\n\"\"\" navbar Home tab rendering \"\"\"",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_patrols",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_patrols(request):\n    add_patrol = AddPatrolForm()\n    end_patrol = EndPatrolForm()\n    assign_patrol = AssignPatrolForm()\n    patrols = Patrol.objects.all()\n    profiles = Profile.objects.all()\n    context = {\n        'title': 'manage_patrols',\n        'add_patrol': add_patrol,\n        'end_patrol': end_patrol,",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_member",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_member(request):\n    profiles = Profile.objects.all()\n    activate = ActivateMemberForm()\n    fees = MembershipFeeForm()\n    pays = MembershipFee.objects.all().select_related('member').select_related('member__user').values(\n        'id', 'member__user__username', 'for_year', 'member__user__is_active', 'is_paid')\n    users = User.objects.all().values(\n        'id', 'username', 'is_active', 'is_skr', 'is_mem', 'is_sec', 'is_ldr', 'is_exa', 'last_login')\n    \"\"\" .select_related(\n        'user').values_list('id', 'member__user_user', 'for_year', 'member__user__is_active', 'is_paid')",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_announcements",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_announcements(request):\n    announce_form = AnnounceForm()\n    announce_table = Announcement.objects.all()\n    context = {\n        'title': 'manage_announce',\n        'announce_form': announce_form,\n        'announce_table': announce_table,\n    }\n    return render(request, 'manager/manage_announce', context)\n\"\"\" manage badges tab render \"\"\"",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "manage_badges",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def manage_badges(request):\n    context = {\n    }\n    add_badge = BadgeForm()\n    add_requirement = RequirementForm()\n    badges = Badge.objects.all().values()\n    requirements = Requirement.objects.all().select_related('badge').values(\n        'id', 'number', 'badge__name', 'name', 'description').order_by('badge__level', 'number')\n    context = {\n        'title': 'manage_badges',",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "export_attendance",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def export_attendance(request):\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"attendance.csv\"'\n    writer = csv.writer(response)\n    writer.writerow(['Patrol', 'Date', 'Hike', 'Camp',\n                    'Project', 'Meeting', 'Total'])\n    patrols = Patrol.objects.all()\n    for patrol in patrols:\n        writer.writerow([patrol.name])\n        for attendance in patrol.attendance_set.all():",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "generate_attendance_report",
        "kind": 2,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "def generate_attendance_report(year: int):\n    # Query the database to get the attendance data for the given year\n    attendance_data = Attendance.objects.filter(date__year=year)\n    # Create a pandas DataFrame from the attendance data\n    attendance_df = pd.DataFrame(list(attendance_data.values()))\n    # Group the attendance data by member and calculate the total attendance for each member\n    member_attendance = attendance_df.groupby(\n        ['member']).size().reset_index(name='attendance_count')\n    # Create a table from the member attendance data\n    member_attendance_table = Table(",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "User = get_user_model()\ntoday = date.today()\n\"\"\" Add Attendance \"\"\"\n@ login_required()\ndef add_attendance(request):\n    \"\"\" ajax add Attendance \"\"\"\n    try:\n        if request.method == 'POST':\n            # check and get variables\n            print(\"Form submitted:\")",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "manager.views",
        "description": "manager.views",
        "peekOfCode": "today = date.today()\n\"\"\" Add Attendance \"\"\"\n@ login_required()\ndef add_attendance(request):\n    \"\"\" ajax add Attendance \"\"\"\n    try:\n        if request.method == 'POST':\n            # check and get variables\n            print(\"Form submitted:\")\n            print(\"----------------\")",
        "detail": "manager.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "member.migrations.0001_initial",
        "description": "member.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Badge',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('level', models.PositiveIntegerField(unique=True)),",
        "detail": "member.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "member.migrations.0002_alter_hike_nights",
        "description": "member.migrations.0002_alter_hike_nights",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('member', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='hike',\n            name='nights',\n            field=models.PositiveIntegerField(blank=True, default=0),\n        ),",
        "detail": "member.migrations.0002_alter_hike_nights",
        "documentation": {}
    },
    {
        "label": "CampAdmin",
        "kind": 6,
        "importPath": "member.admin",
        "description": "member.admin",
        "peekOfCode": "class CampAdmin(admin.ModelAdmin):\n    list_display = ['title', 'date', 'nights']\n    list_filter = ['title', 'date', 'nights']\n    search_fields = ['title', 'date']\n@admin.register(models.Hike)\nclass HikeAdmin(admin.ModelAdmin):\n    list_display = ['title',  'year',\n                    'date', 'time', 'nights']\n    list_filter = ['title',  'year',\n                   'date', 'time', 'nights']",
        "detail": "member.admin",
        "documentation": {}
    },
    {
        "label": "HikeAdmin",
        "kind": 6,
        "importPath": "member.admin",
        "description": "member.admin",
        "peekOfCode": "class HikeAdmin(admin.ModelAdmin):\n    list_display = ['title',  'year',\n                    'date', 'time', 'nights']\n    list_filter = ['title',  'year',\n                   'date', 'time', 'nights']\n    search_fields = ['title', 'date']\n@admin.register(models.Project)\nclass ProjectAdmin(admin.ModelAdmin):\n    list_display = ['title', 'date', 'time', 'location',]\n    list_filter = ['title', 'date', 'time', 'location',]",
        "detail": "member.admin",
        "documentation": {}
    },
    {
        "label": "ProjectAdmin",
        "kind": 6,
        "importPath": "member.admin",
        "description": "member.admin",
        "peekOfCode": "class ProjectAdmin(admin.ModelAdmin):\n    list_display = ['title', 'date', 'time', 'location',]\n    list_filter = ['title', 'date', 'time', 'location',]\n    search_fields = ['title', 'date']\n@admin.register(models.Requirement)\nclass RequirementAdmin(admin.ModelAdmin):\n    list_display = ['name', 'number', ]\n    list_filter = ['name', 'number', ]\n    search_fields = ['name']\n@admin.register(models.Badge)",
        "detail": "member.admin",
        "documentation": {}
    },
    {
        "label": "RequirementAdmin",
        "kind": 6,
        "importPath": "member.admin",
        "description": "member.admin",
        "peekOfCode": "class RequirementAdmin(admin.ModelAdmin):\n    list_display = ['name', 'number', ]\n    list_filter = ['name', 'number', ]\n    search_fields = ['name']\n@admin.register(models.Badge)\nclass BadgeAdmin(admin.ModelAdmin):\n    list_display = ['level', 'name', 'description']\n    list_filter = ['level', 'name']\n    search_fields = ['date', 'name']",
        "detail": "member.admin",
        "documentation": {}
    },
    {
        "label": "BadgeAdmin",
        "kind": 6,
        "importPath": "member.admin",
        "description": "member.admin",
        "peekOfCode": "class BadgeAdmin(admin.ModelAdmin):\n    list_display = ['level', 'name', 'description']\n    list_filter = ['level', 'name']\n    search_fields = ['date', 'name']",
        "detail": "member.admin",
        "documentation": {}
    },
    {
        "label": "MemberConfig",
        "kind": 6,
        "importPath": "member.apps",
        "description": "member.apps",
        "peekOfCode": "class MemberConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'member'",
        "detail": "member.apps",
        "documentation": {}
    },
    {
        "label": "ProfileUpdateForm",
        "kind": 6,
        "importPath": "member.forms",
        "description": "member.forms",
        "peekOfCode": "class ProfileUpdateForm(forms.ModelForm):\n    class Meta:\n        model = Profile\n        fields = ['user', 'email', 'skills', 'sports',\n                  'birthday', 'contact', 'address']\nclass FilesUpdateForm(forms.ModelForm):\n    class Meta:\n        model = UserFile\n        fields = ['user', 'picture', 'medical']\n\"\"\" hike tab forms \"\"\"",
        "detail": "member.forms",
        "documentation": {}
    },
    {
        "label": "FilesUpdateForm",
        "kind": 6,
        "importPath": "member.forms",
        "description": "member.forms",
        "peekOfCode": "class FilesUpdateForm(forms.ModelForm):\n    class Meta:\n        model = UserFile\n        fields = ['user', 'picture', 'medical']\n\"\"\" hike tab forms \"\"\"\nclass MemberHikeForm(forms.Form):\n    hike = forms.ModelChoiceField(queryset=Hike.objects.all(\n    ), widget=forms.Select(attrs={'class': 'form-control selectize pt-2 col-lg-10 col-md-10 col-sm-12', 'id': 'hike_field', 'placeholder': 'Select a hike...'}))\n\"\"\" camp tab forms \"\"\"\nclass MemberCampForm(forms.Form):",
        "detail": "member.forms",
        "documentation": {}
    },
    {
        "label": "MemberHikeForm",
        "kind": 6,
        "importPath": "member.forms",
        "description": "member.forms",
        "peekOfCode": "class MemberHikeForm(forms.Form):\n    hike = forms.ModelChoiceField(queryset=Hike.objects.all(\n    ), widget=forms.Select(attrs={'class': 'form-control selectize pt-2 col-lg-10 col-md-10 col-sm-12', 'id': 'hike_field', 'placeholder': 'Select a hike...'}))\n\"\"\" camp tab forms \"\"\"\nclass MemberCampForm(forms.Form):\n    camp = forms.ModelChoiceField(queryset=Camp.objects.all(\n    ), widget=forms.Select(attrs={'class': 'form-control selectize  pt-2 col-lg-10 col-md-10 col-sm-12', 'id': 'camp_field', 'placeholder': 'Select a camp...'}))\n\"\"\" project tab forms \"\"\"\nclass MemberProjectForm(forms.Form):\n    project = forms.ModelChoiceField(queryset=Project.objects.all(",
        "detail": "member.forms",
        "documentation": {}
    },
    {
        "label": "MemberCampForm",
        "kind": 6,
        "importPath": "member.forms",
        "description": "member.forms",
        "peekOfCode": "class MemberCampForm(forms.Form):\n    camp = forms.ModelChoiceField(queryset=Camp.objects.all(\n    ), widget=forms.Select(attrs={'class': 'form-control selectize  pt-2 col-lg-10 col-md-10 col-sm-12', 'id': 'camp_field', 'placeholder': 'Select a camp...'}))\n\"\"\" project tab forms \"\"\"\nclass MemberProjectForm(forms.Form):\n    project = forms.ModelChoiceField(queryset=Project.objects.all(\n    ), widget=forms.Select(attrs={'class': 'form-control selectize pt-2 col-lg-10 col-md-10 col-sm-12', 'id': 'project_field',  'placeholder': 'Select a project...'}))\n\"\"\" badges tab forms \"\"\"\nclass MemberRequirementForm(forms.Form):\n    requirement = forms.ModelChoiceField(queryset=Requirement.objects.all().order_by('badge__level', 'number'), widget=forms.Select(",
        "detail": "member.forms",
        "documentation": {}
    },
    {
        "label": "MemberProjectForm",
        "kind": 6,
        "importPath": "member.forms",
        "description": "member.forms",
        "peekOfCode": "class MemberProjectForm(forms.Form):\n    project = forms.ModelChoiceField(queryset=Project.objects.all(\n    ), widget=forms.Select(attrs={'class': 'form-control selectize pt-2 col-lg-10 col-md-10 col-sm-12', 'id': 'project_field',  'placeholder': 'Select a project...'}))\n\"\"\" badges tab forms \"\"\"\nclass MemberRequirementForm(forms.Form):\n    requirement = forms.ModelChoiceField(queryset=Requirement.objects.all().order_by('badge__level', 'number'), widget=forms.Select(\n        attrs={'class': 'form-control selectize pt-2  col-lg-10 col-md-10 col-sm-12', 'id': 'requirement_field', 'placeholder': 'Select your requirement...'}))",
        "detail": "member.forms",
        "documentation": {}
    },
    {
        "label": "MemberRequirementForm",
        "kind": 6,
        "importPath": "member.forms",
        "description": "member.forms",
        "peekOfCode": "class MemberRequirementForm(forms.Form):\n    requirement = forms.ModelChoiceField(queryset=Requirement.objects.all().order_by('badge__level', 'number'), widget=forms.Select(\n        attrs={'class': 'form-control selectize pt-2  col-lg-10 col-md-10 col-sm-12', 'id': 'requirement_field', 'placeholder': 'Select your requirement...'}))",
        "detail": "member.forms",
        "documentation": {}
    },
    {
        "label": "Hike",
        "kind": 6,
        "importPath": "member.models",
        "description": "member.models",
        "peekOfCode": "class Hike(models.Model):\n    title = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    year = models.DateField(blank=False)\n    date = models.DateField(blank=False)\n    time = models.TimeField(blank=False)\n    nights = models.PositiveIntegerField(blank=True, default=0)\n    is_day = models.BooleanField(default=True)\n    location = models.CharField(max_length=50)\n    def __str__(self):",
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Camp",
        "kind": 6,
        "importPath": "member.models",
        "description": "member.models",
        "peekOfCode": "class Camp(models.Model):\n    title = models.CharField(max_length=255)\n    description = models.TextField(blank=False)\n    date = models.DateField(blank=False)\n    time = models.TimeField(blank=False)\n    nights = models.PositiveIntegerField(blank=False)\n    is_day = models.BooleanField(default=False)\n    is_overseas = models.BooleanField(default=False)\n    country = models.CharField(blank=True, max_length=50)\n    location = models.CharField(blank=False, max_length=50)",
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "member.models",
        "description": "member.models",
        "peekOfCode": "class Project(models.Model):\n    title = models.CharField(blank=False, max_length=255)\n    description = models.TextField(blank=True)\n    date = models.DateField(blank=False)\n    time = models.TimeField(blank=False)\n    location = models.CharField(blank=False, max_length=50)\n    def __str__(self):\n        return f'{self.title} | {self.date.strftime(\"%Y\")}'\n\"\"\" Badge model for badges \"\"\"\nclass Badge(models.Model):",
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Badge",
        "kind": 6,
        "importPath": "member.models",
        "description": "member.models",
        "peekOfCode": "class Badge(models.Model):\n    level = models.PositiveIntegerField(blank=False, unique=True)\n    name = models.CharField(max_length=255, blank=False, unique=True)\n    description = models.TextField(blank=True)\n    class Meta:\n        verbose_name = _(\"Badge\")\n        verbose_name_plural = _(\"Badges\")\n    def __str__(self):\n        return self.name\n    def get_absolute_url(self):",
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Requirement",
        "kind": 6,
        "importPath": "member.models",
        "description": "member.models",
        "peekOfCode": "class Requirement(models.Model):\n    number = models.PositiveIntegerField(blank=False)\n    badge = models.ForeignKey(Badge, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    class Meta:\n        verbose_name = _(\"Requirement\")\n        verbose_name_plural = _(\"Requirements\")\n    def __str__(self):\n        return (f'({self.badge.level},{self.number}) {self.name}')",
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "member.urls",
        "description": "member.urls",
        "peekOfCode": "app_name = 'member'\nurlpatterns = [\n    path('profile/', views.view_profile, name='profile'),\n    path('profile/<int:user_id>/', views.user_profile, name='profile'),\n    path('profile/up/', views.profile_update, name='update_profile'),\n    #path('hikes/', views.view_hikes, name='hikes'),\n    path('hikes/<int:user_id>/', views.hikes, name='hikes'),\n    path('hikes/add/', views.add_hike, name='profile_add_hike'),\n    #path('projects/', views.view_projects, name='projects'),\n    path('projects/<int:user_id>/', views.projects, name='projects'),",
        "detail": "member.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "member.urls",
        "description": "member.urls",
        "peekOfCode": "urlpatterns = [\n    path('profile/', views.view_profile, name='profile'),\n    path('profile/<int:user_id>/', views.user_profile, name='profile'),\n    path('profile/up/', views.profile_update, name='update_profile'),\n    #path('hikes/', views.view_hikes, name='hikes'),\n    path('hikes/<int:user_id>/', views.hikes, name='hikes'),\n    path('hikes/add/', views.add_hike, name='profile_add_hike'),\n    #path('projects/', views.view_projects, name='projects'),\n    path('projects/<int:user_id>/', views.projects, name='projects'),\n    path('projects/add/', views.add_project, name='profile_add_project'),",
        "detail": "member.urls",
        "documentation": {}
    },
    {
        "label": "saturday_posts",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def saturday_posts(request):\n    posts = Post.objects.all().order_by('-id')\n    context = {\n        'title': 'articles',\n        'posts': posts,\n    }\n    return render(request, 'manager/post_list', context)\n\"\"\" update profile details specific user \"\"\"\n@login_required()\ndef profile_update(request):",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "profile_update",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def profile_update(request):\n    try:\n        if request.method == 'POST':\n            # POST para\n            prof = request.POST.get('pro')\n            print(prof)\n            email = request.POST.get('email')\n            skills = request.POST.get('skills')\n            sports = request.POST.get('sports')\n            address = request.POST.get('address')",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "view_profile",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def view_profile(request):\n    profile = Profile.objects.all()\n    files = UserFile.objects.all()\n    file_form = FilesUpdateForm()\n    update_form = ProfileUpdateForm()\n    context = {\n        'title': 'profile',\n        'files': files,\n        'profile': profile,\n        'file_form': file_form,",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "user_profile",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def user_profile(request, user_id):\n    result = session_processor(request)\n    print(result)\n    # Get the user with the specified ID\n    user = User.objects.get(id=user_id)\n    profile = Profile.objects.get(user=user)\n    files = UserFile.objects.get(user=user)\n    camps = profile.camps.all()\n    nights = Camp.objects.filter(id__in=camps).aggregate(\n        Sum('nights'))['nights__sum']",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "hikes",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def hikes(request, user_id):\n    add_hike = MemberHikeForm()\n    user = User.objects.get(pk=user_id)\n    profile = Profile.objects.get(user=user)\n    hikes = profile.hikes.all()\n    context = {\n        'title': 'hikes',\n        'hikes': hikes,\n        'add_hike': add_hike,\n        'profile': profile,",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "add_hike",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def add_hike(request):\n    context = {'result': 'not loaded'}\n    if request.method == 'POST':\n        profile = int(request.POST.get('pro'))\n        hike = int(request.POST.get('hike'))\n        profile = Profile.objects.get(id=profile)\n        hike = Hike.objects.get(id=hike)\n        if hike:\n            if profile.hikes.filter(id=hike.id).exists():\n                print('hike already exists')",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "view_hikes",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def view_hikes(request):\n    context = {\n        'title': 'hikes'\n    }\n    return render(request, 'member/hikes', context)\n\"\"\" badges \"\"\"\n@login_required()\ndef view_badges(request):\n    context = {\n        'title': 'badges'",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "view_badges",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def view_badges(request):\n    context = {\n        'title': 'badges'\n    }\n    return render(request, 'member/badges', context)\n\"\"\" get badges for specific user \"\"\"\n@login_required()\ndef badges(request, user_id):\n    user = User.objects.get(id=user_id)\n    profile = Profile.objects.get(user=user)",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "badges",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def badges(request, user_id):\n    user = User.objects.get(id=user_id)\n    profile = Profile.objects.get(user=user)\n    # badges completed\n    badges = profile.badges.all()\n    # badges applied for\n    applies = Complete.objects.all()\n    context = {\n        'title': 'badges',\n        'badges': badges,",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "apply_requirement",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def apply_requirement(request):\n    context = {'result': 'not loaded'}\n    if request.method == 'POST':\n        # save profile and requirement id to objects\n        pro = request.POST.get('pro')\n        print(f'pro is {pro}')\n        pro = int(pro)\n        print(f'int pro is {pro}')\n        requirement = request.POST.get('requirement')\n        print(f'require is {requirement}')",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "view_projects",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def view_projects(request):\n    context = {\n        'title': 'projects'\n    }\n    return render(request, 'member/projects', context)\n\"\"\" get projects for specific user \"\"\"\n@login_required()\ndef projects(request, user_id):\n    select_project = MemberProjectForm()\n    user = User.objects.get(id=user_id)",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "projects",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def projects(request, user_id):\n    select_project = MemberProjectForm()\n    user = User.objects.get(id=user_id)\n    profile = Profile.objects.get(user=user)\n    projects = profile.projects.all()\n    context = {\n        'title': 'projects',\n        'projects': projects,\n        'user_project': projects,\n        'profile': profile,",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "add_project",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def add_project(request):\n    context = {'result': 'not loaded'}\n    if request.method == 'POST':\n        profile = int(request.POST.get('pro'))\n        project = int(request.POST.get('project'))\n        profile = Profile.objects.get(id=profile)\n        project = Project.objects.get(id=project)\n        if project:\n            if profile.projects.filter(id=project.id).exists():\n                print('project already exists')",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "view_camps",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def view_camps(request):\n    context = {\n        'title': 'camps'\n    }\n    return render(request, 'member/camps', context)\n\"\"\" get camps for specific user \"\"\"\n@login_required()\ndef camps(request, user_id):\n    select_camp = MemberCampForm()\n    user = User.objects.get(id=user_id)",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "camps",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def camps(request, user_id):\n    select_camp = MemberCampForm()\n    user = User.objects.get(id=user_id)\n    profile = Profile.objects.get(user=user)\n    camps = profile.camps.all()\n    print(camps.values_list())\n    context = {\n        'title': 'camps',\n        'select_camp': select_camp,\n        'user_camps': camps,",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "add_camp",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def add_camp(request):\n    context = {'result': 'not loaded'}\n    if request.method == 'POST':\n        pro = int(request.POST.get('pro'))\n        camp = request.POST.get('camp')\n        profile = Profile.objects.get(id=pro)\n        camp = Camp.objects.get(id=camp)\n        if camp:\n            if profile.camps.filter(id=camp.id).exists():\n                print('camp already exists')",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "view_announce",
        "kind": 2,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "def view_announce(request):\n    context = {\n        'title': 'messages'\n    }\n    #announcements = Announcement.objects.all()\n    return render(request, 'member/messages', context)",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "patrol.migrations.0001_initial",
        "description": "patrol.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('core', '0006_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Attendance',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "patrol.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "patrol.migrations.0002_alter_attendance_time",
        "description": "patrol.migrations.0002_alter_attendance_time",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('patrol', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='attendance',\n            name='time',\n            field=models.TimeField(auto_now_add=True),\n        ),",
        "detail": "patrol.migrations.0002_alter_attendance_time",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "patrol.migrations.0003_alter_attendance_title",
        "description": "patrol.migrations.0003_alter_attendance_title",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('patrol', '0002_alter_attendance_time'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='attendance',\n            name='title',\n            field=models.CharField(blank=True, max_length=100, null=True),\n        ),",
        "detail": "patrol.migrations.0003_alter_attendance_title",
        "documentation": {}
    },
    {
        "label": "PatrolConfig",
        "kind": 6,
        "importPath": "patrol.apps",
        "description": "patrol.apps",
        "peekOfCode": "class PatrolConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'patrol'",
        "detail": "patrol.apps",
        "documentation": {}
    },
    {
        "label": "encrypt_value",
        "kind": 2,
        "importPath": "patrol.cryptography",
        "description": "patrol.cryptography",
        "peekOfCode": "def encrypt_value(value):\n    # Generate a key and use it to create a Fernet object\n    key = Fernet.generate_key()\n    fernet = Fernet(key)\n    # Encrypt the value\n    encrypted_value = fernet.encrypt(value.encode())\n    # Return the encrypted value as a hexadecimal string\n    return encrypted_value.hex()\ndef decrypt_value(encrypted_value, key):\n    # Convert the encrypted value back to a bytes object",
        "detail": "patrol.cryptography",
        "documentation": {}
    },
    {
        "label": "decrypt_value",
        "kind": 2,
        "importPath": "patrol.cryptography",
        "description": "patrol.cryptography",
        "peekOfCode": "def decrypt_value(encrypted_value, key):\n    # Convert the encrypted value back to a bytes object\n    encrypted_value = bytes.fromhex(encrypted_value)\n    # Create a Fernet object using the key\n    fernet = Fernet(key)\n    # Decrypt the value\n    decrypted_value = fernet.decrypt(encrypted_value)\n    # Return the decrypted value as a string\n    return decrypted_value.decode()",
        "detail": "patrol.cryptography",
        "documentation": {}
    },
    {
        "label": "ReadOnlyWidget",
        "kind": 6,
        "importPath": "patrol.forms",
        "description": "patrol.forms",
        "peekOfCode": "class ReadOnlyWidget(forms.Widget):\n    def render(self, name, value, attrs=None, renderer=None):\n        attrs = {'class': 'form-select', 'readonly': True}\n        value = Profile.objects.get(user=value)\n        return value, attrs\nclass ResultForm(forms.ModelForm):\n    class Meta:\n        model = Complete\n        fields = ['user', 'requirement', 'stage', 'examiner']\n        widgets = {",
        "detail": "patrol.forms",
        "documentation": {}
    },
    {
        "label": "ResultForm",
        "kind": 6,
        "importPath": "patrol.forms",
        "description": "patrol.forms",
        "peekOfCode": "class ResultForm(forms.ModelForm):\n    class Meta:\n        model = Complete\n        fields = ['user', 'requirement', 'stage', 'examiner']\n        widgets = {\n            'user': forms.Select(attrs={'class': 'form-control  col-lg-12 col-sm-12', 'readonly': True, 'disabled': True}),\n            'examiner': forms.Select(attrs={'class': 'form-control  col-lg-12 col-sm-12', 'readonly': True, 'disabled': True}),\n            'requirement': forms.Select(attrs={'class': 'form-control  col-lg-12 col-sm-12', 'readonly': True, 'disabled': True}),\n            'stage': forms.Select(attrs={'class': 'form-control selectize col-lg-12 col-sm-12', 'style': 'width: 100%'}),\n        }",
        "detail": "patrol.forms",
        "documentation": {}
    },
    {
        "label": "AttendanceForm",
        "kind": 6,
        "importPath": "patrol.forms",
        "description": "patrol.forms",
        "peekOfCode": "class AttendanceForm(forms.ModelForm):\n    class Meta:\n        model = Attendance\n        fields = ['title', 'marker', 'member']\n        widgets = {\n            'marker': forms.Select(attrs={'id': 'id_marker', 'class': 'form-control selectize col-lg-12 col-sm-12', 'disabled': True}),\n            'member': forms.Select(attrs={'id': 'id_member', 'class': 'form-control selectize col-lg-12 col-sm-12', 'placeholder': 'Select a member'}),\n        }\nclass SelectMember(forms.Form):\n    member = forms.ModelChoiceField(queryset=Profile.objects.all(), widget=forms.Select(attrs={'class': 'form-control selectize col-lg-12 col-sm-12', 'placeholder': 'Select a member'}))",
        "detail": "patrol.forms",
        "documentation": {}
    },
    {
        "label": "SelectMember",
        "kind": 6,
        "importPath": "patrol.forms",
        "description": "patrol.forms",
        "peekOfCode": "class SelectMember(forms.Form):\n    member = forms.ModelChoiceField(queryset=Profile.objects.all(), widget=forms.Select(attrs={'class': 'form-control selectize col-lg-12 col-sm-12', 'placeholder': 'Select a member'}))",
        "detail": "patrol.forms",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "kind": 6,
        "importPath": "patrol.models",
        "description": "patrol.models",
        "peekOfCode": "class Attendance(models.Model):\n    title = models.CharField(max_length=100, blank=True, null=True)\n    marker = models.ForeignKey(\n        Profile, on_delete=models.CASCADE, related_name='marker')\n    date = models.DateField(auto_now_add=True)\n    member = models.ForeignKey(\n        Profile, on_delete=models.CASCADE, related_name='member')\n    time = models.TimeField(auto_now_add=True)\n    def __str__(self):\n        return self.title",
        "detail": "patrol.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "patrol.urls",
        "description": "patrol.urls",
        "peekOfCode": "app_name = 'patrol'\nurlpatterns = [\n    path('view/applied/', views.view_examine, name='examine_tab'),\n    path('view/examine/page/<int:pk>/', views.examine_form, name='examine_form'),\n    path('evaluate/', views.evaluate, name='evaluate'),\n    path('view/members/', views.contact, name='contact_tab'),\n    path('view/profile/<int:user>/', views.view_member, name='view_member'),\n    path('view/profile/', views.view_profile, name='profile_tab'),\n    path('view/attendance/', views.view_attendance, name='attendance_tab'),\n    path('add/attendance/', views.add_attendance, name='add_attendance'),",
        "detail": "patrol.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "patrol.urls",
        "description": "patrol.urls",
        "peekOfCode": "urlpatterns = [\n    path('view/applied/', views.view_examine, name='examine_tab'),\n    path('view/examine/page/<int:pk>/', views.examine_form, name='examine_form'),\n    path('evaluate/', views.evaluate, name='evaluate'),\n    path('view/members/', views.contact, name='contact_tab'),\n    path('view/profile/<int:user>/', views.view_member, name='view_member'),\n    path('view/profile/', views.view_profile, name='profile_tab'),\n    path('view/attendance/', views.view_attendance, name='attendance_tab'),\n    path('add/attendance/', views.add_attendance, name='add_attendance'),\n]",
        "detail": "patrol.urls",
        "documentation": {}
    },
    {
        "label": "add_attendance",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def add_attendance(request):\n    \"\"\" ajax add Attendance \"\"\"\n    try:\n        if request.method == 'POST':\n            # check and get variables\n            print(\"Form submitted:\")\n            print(\"----------------\")\n            title = request.POST.get('title')\n            marker = request.POST.get('marker')\n            #marker = request.session.get('_auth_user_id')",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "view_attendance",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def view_attendance(request):\n    \"\"\" view tab for Attendance \"\"\"\n    patrol = request.session.get('s_patrol_id')\n    profile = request.session.get('s_profile_id')\n    print(f'Patrol id is -- {patrol}')\n    members = Profile.objects.filter(patrol=patrol).all()\n    attends = Attendance.objects.filter(\n        member__in=members).select_related('user')\\\n        .values(\n            'title', 'marker__user__username', 'date', 'member__user__username', 'time'",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def contact(request):\n    \"\"\" view tab members \"\"\"\n    patrol = request.session.get('s_patrol_id')\n    print(f'Patrol id is -- {patrol}')\n    members = Profile.objects.filter(patrol=patrol).all()\n    # .select_related('badges').select_related('requirement').annotate(\n    #     max_level=Max('badge__level')).order_by('-level').first()\n    context = {\n        'title': 'members',\n        'members': members,",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "evaluate",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def evaluate(request):\n    \"\"\" pass fail or apply for badge \"\"\"\n    context = {\n    }\n    if request.method == 'POST':\n        # check and get variables\n        print(\"Form submitted:\")\n        print(\"----------------\")\n        user = request.POST.get('user')\n        print(f'user is {user}')",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "examine_form",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def examine_form(request, pk):\n    \"\"\" load examine form in a new tab after clicking on table link\"\"\"\n    # get the object\n    comp = Complete.objects.get(id=pk)\n    # get the examiner\n    examiner = Profile.objects.get(user=request.user)\n    comp.examiner = examiner\n    form = ResultForm(instance=comp)\n    context = {\n        'title': 'examine',",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "view_examine",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def view_examine(request):\n    \"\"\" view tab badges \"\"\"\n    # badges applied for\n    applies = Complete.objects.filter(stage=1).all()\n    context = {\n        'title': 'examine',\n        'applies': applies,\n    }\n    return render(request, 'patrol/badges', context)\n\"\"\" view member profiles \"\"\"",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "view_member",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def view_member(request, user_id):\n    profile = Profile.objects.get(user=user_id)\n    patrol_m = profile.patrol.id\n    patrol_l = request.session.get('s_patrol_id')\n    print(f'Patrol id is -- {patrol_l} and {patrol_m}')\n    valid = False\n    profiles = Profile.objects.filter(patrol=patrol_l).all()\n    form = SelectMember(initial={'members': profiles})\n    try:\n        if (patrol_m == patrol_l):",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "view_profile",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def view_profile(request):\n    patrol_l = request.session.get('s_patrol_id')\n    profiles = Profile.objects.filter(patrol=patrol_l).all()\n    form = SelectMember(initial={'members': profiles})\n    try:\n        name = request.GET.get('member')\n        profile = Profile.objects.get(pk=name)\n        user = profile.user\n        files = UserFile.objects.get(user=user)\n        hikes = profile.hikes.all()",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def view(request):\n    # Encrypt the value\n    encrypted_value = encrypt_value(\"my value\")\n    # Pass the encrypted value to the template\n    return render(request, 'template', {'encrypted_value': encrypted_value})\n\"\"\" decrypt \"\"\"\ndef view(request):\n    # Get the encrypted value from the request\n    encrypted_value = request.POST.get('encrypted_value')\n    # Decrypt the value",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "def view(request):\n    # Get the encrypted value from the request\n    encrypted_value = request.POST.get('encrypted_value')\n    # Decrypt the value\n    decrypted_value = decrypt_value(encrypted_value, key)",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "patrol.views",
        "description": "patrol.views",
        "peekOfCode": "today = date.today()\n@ login_required()\ndef add_attendance(request):\n    \"\"\" ajax add Attendance \"\"\"\n    try:\n        if request.method == 'POST':\n            # check and get variables\n            print(\"Form submitted:\")\n            print(\"----------------\")\n            title = request.POST.get('title')",
        "detail": "patrol.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0001_initial",
        "description": "store.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('core', '0002_alter_memberrole_role'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Item',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),",
        "detail": "store.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0002_item_item_code",
        "description": "store.migrations.0002_item_item_code",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='item_code',\n            field=models.CharField(blank=True, default='', max_length=5),\n        ),",
        "detail": "store.migrations.0002_item_item_code",
        "documentation": {}
    },
    {
        "label": "ItemsAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ItemsAdmin(admin.ModelAdmin):\n    list_display = ['item_name', 'id', 'item_price', 'item_quantity_received',\n                    'item_quantity_available', 'item_purchased_date', 'item_units']\n    list_filter = ['item_name', 'id',  'item_price', 'item_quantity_received',\n                   'item_quantity_available', 'item_purchased_date', 'item_units']\n@admin.register(models.Broken)\nclass BrokenAdmin(admin.ModelAdmin):\n    list_display = ['item', 'id', 'item_quantity_broken', 'item_broken_date',]\n    list_filter = ['item', 'id', 'item_quantity_broken', 'item_broken_date']\n@admin.register(models.Lend)",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "BrokenAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class BrokenAdmin(admin.ModelAdmin):\n    list_display = ['item', 'id', 'item_quantity_broken', 'item_broken_date',]\n    list_filter = ['item', 'id', 'item_quantity_broken', 'item_broken_date']\n@admin.register(models.Lend)\nclass LendAdmin(admin.ModelAdmin):\n    list_display = ['item', 'id', 'user', 'item_quantity_lent',\n                    'item_lent_date', 'date_returned_date']\n    list_filter = ['item', 'id', 'user', 'item_quantity_lent',\n                   'item_lent_date', 'date_returned_date']",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "LendAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class LendAdmin(admin.ModelAdmin):\n    list_display = ['item', 'id', 'user', 'item_quantity_lent',\n                    'item_lent_date', 'date_returned_date']\n    list_filter = ['item', 'id', 'user', 'item_quantity_lent',\n                   'item_lent_date', 'date_returned_date']",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "StoreConfig",
        "kind": 6,
        "importPath": "store.apps",
        "description": "store.apps",
        "peekOfCode": "class StoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'store'",
        "detail": "store.apps",
        "documentation": {}
    },
    {
        "label": "LendForm",
        "kind": 6,
        "importPath": "store.forms",
        "description": "store.forms",
        "peekOfCode": "class LendForm(forms.ModelForm):\n    class Meta:\n        model = Lend\n        fields = ['user', 'item', 'item_quantity_lent']\n        widgets = {\n            \"user\": forms.Select(attrs={'class': 'form-control', 'placeholder': 'Select the user'}),\n            'item': forms.Select(attrs={'class': 'form-control', 'placeholder': 'Select the item'}),\n            'item_quantity_lent': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Enter the quantity', 'min': '1'})\n        }\n    # def __init__(self, *args, **kwargs):",
        "detail": "store.forms",
        "documentation": {}
    },
    {
        "label": "ReturnLendForm",
        "kind": 6,
        "importPath": "store.forms",
        "description": "store.forms",
        "peekOfCode": "class ReturnLendForm(forms.Form):\n    lend = forms.ModelChoiceField(queryset=Lend.objects.filter(\n        item_is_lent=True), widget=forms.Select(attrs={'class': 'form-control', 'placeholder': 'Select the record'}))",
        "detail": "store.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "store.forms",
        "description": "store.forms",
        "peekOfCode": "User = get_user_model()\nclass LendForm(forms.ModelForm):\n    class Meta:\n        model = Lend\n        fields = ['user', 'item', 'item_quantity_lent']\n        widgets = {\n            \"user\": forms.Select(attrs={'class': 'form-control', 'placeholder': 'Select the user'}),\n            'item': forms.Select(attrs={'class': 'form-control', 'placeholder': 'Select the item'}),\n            'item_quantity_lent': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Enter the quantity', 'min': '1'})\n        }",
        "detail": "store.forms",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Item(models.Model):\n    id = models.AutoField(primary_key=True)\n    item_code = models.CharField(max_length=5, blank=True, default=\"\")\n    item_name = models.CharField(max_length=50, blank=False)\n    item_price = models.IntegerField(blank=True)\n    item_quantity_received = models.IntegerField(blank=False)\n    item_quantity_available = models.IntegerField(blank=True)\n    item_purchased_date = models.DateField(auto_now_add=True, blank=False)\n    item_units = models.CharField(max_length=50, blank=False)\n    # def save(self, *args, **kwargs):",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Broken",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Broken(models.Model):\n    item = models.ForeignKey(Item, default=1,  on_delete=models.CASCADE)\n    item_quantity_broken = models.IntegerField(blank=True)\n    item_broken_date = models.DateField(auto_now_add=True, blank=False)\n    item_is_broken = models.BooleanField(default=True)\n    date_repaired = models.DateField(auto_now=True, blank=True)\n    def __str__(self):\n        return self.item.item_name\nclass Lend(models.Model):\n    user = models.ForeignKey(Profile, on_delete=models.CASCADE)",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Lend",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Lend(models.Model):\n    user = models.ForeignKey(Profile, on_delete=models.CASCADE)\n    item = models.ForeignKey(Item, on_delete=models.CASCADE)\n    item_quantity_lent = models.IntegerField(blank=True)\n    item_lent_date = models.DateField(auto_now_add=True, blank=False)\n    item_is_lent = models.BooleanField(default=True)\n    date_returned_date = models.DateField(null=True, blank=True)\n    def __str__(self):\n        return (f'({self.id}){self.item.item_name}-{self.user.user.username}')",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "User = get_user_model() \"\"\"\n# def generate_code(item_id):\n#     # Convert the item ID to a string and pad it with zeros\n#     code = str(item_id).zfill(5)\n#     return code\nclass Item(models.Model):\n    id = models.AutoField(primary_key=True)\n    item_code = models.CharField(max_length=5, blank=True, default=\"\")\n    item_name = models.CharField(max_length=50, blank=False)\n    item_price = models.IntegerField(blank=True)",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "app_name = 'store'\nurlpatterns = [\n    path('view/main/', views.main, name='main'),\n    path('view/items/', views.items, name='items'),\n    path('view/broken/', views.broken, name='broken'),\n    path('view/lend/', views.lend, name='lend'),\n    path('view/reports/', views.reports, name='reports'),\n    path('add/item/', views.add_item, name='add_item'),\n    path('add/broken/', views.add_broken, name='add_broken'),\n    path('add/repaired/', views.add_repaired, name='add_repaired'),",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "urlpatterns = [\n    path('view/main/', views.main, name='main'),\n    path('view/items/', views.items, name='items'),\n    path('view/broken/', views.broken, name='broken'),\n    path('view/lend/', views.lend, name='lend'),\n    path('view/reports/', views.reports, name='reports'),\n    path('add/item/', views.add_item, name='add_item'),\n    path('add/broken/', views.add_broken, name='add_broken'),\n    path('add/repaired/', views.add_repaired, name='add_repaired'),\n    path('add/lend/', views.add_lend, name='add_lend'),",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "generate_code",
        "kind": 2,
        "importPath": "store.utility",
        "description": "store.utility",
        "peekOfCode": "def generate_code(item_id):\n    # Convert the item ID to a string and pad it with zeros\n    code = str(item_id).zfill(5)\n    return code",
        "detail": "store.utility",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def main(request):\n    context = {\n        'title': 'main',\n    }\n    return render(request, 'store/main', context)\n\"\"\" view items as a table \"\"\"\n@login_required()\ndef items(request):\n    items = Item.objects.all()\n    context = {",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def items(request):\n    items = Item.objects.all()\n    context = {\n        'title': 'items',\n        'items': items,\n    }\n    return render(request, 'store/items', context)\n\"\"\"  view lend items screen \"\"\"\nlend_form = LendForm()\nreturn_form = ReturnLendForm()",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "lend",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def lend(request):\n    items = Lend.objects.filter(item_is_lent=True)\n    context = {\n        'title': 'lend',\n        'lends': lend_form,\n        'returns': return_form,\n        'items': items,\n    }\n    return render(request, 'store/lend', context)\n\"\"\" view reports screen  \"\"\"",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "reports",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def reports(request):\n    lend_users = Lend.objects.all().select_related('users')\n    lend_items = Lend.objects.all().select_related('item')\n    context = {\n        'title': 'reports',\n        'lend_user': lend_users,\n        'lend_items': lend_items,\n    }\n    return render(request, 'store/reports', context)\n\"\"\" view broken items as a table  \"\"\"",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "broken",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def broken(request):\n    brokens = Broken.objects.all().select_related('item')\n    context = {\n        'title': 'broken',\n        'brokens': brokens,\n    }\n    return render(request, 'store/broken', context)\n\"\"\" add a new item  \"\"\"\n@ login_required()\ndef add_item(request):",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def add_item(request):\n    try:\n        if request.method == 'POST':\n            # store post request variables\n            print(request.POST)\n            item = request.POST.get('item_name')\n            qty = int(request.POST.get('item_qty'))\n            unit = request.POST.get('item_unit')\n            price = int(request.POST.get('item_price'))\n            # if item exists update quantity else create new item",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "add_broken",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def add_broken(request):\n    \"\"\" send items to broken list \"\"\"\n    context = {}\n    try:\n        if request.method == 'POST':\n            # save request params\n            item = request.POST.get('item_code')\n            qty = int(request.POST.get('item_qty'))\n            item = int(item.lstrip('0'))\n            print(item)  # Output: 1",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "add_repaired",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def add_repaired(request):\n    context = {\n    }\n    try:\n        if request.method == 'POST':\n            # save params\n            item = request.POST.get('item_id')\n            qty = int(request.POST.get('item_qty'))\n            item = int(item.lstrip('0'))\n            print(item)  # Output: 1",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "add_lend",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def add_lend(request):\n    context = {'result': 'not loaded'}\n    if request.method == 'POST':\n        user = request.POST.get('user')\n        item = request.POST.get('item')\n        item = int(item.lstrip('0'))\n        qty = int(request.POST.get('item_quantity_lent'))\n        print(item)  # Output: 1\n        # get users list from users table\n        exist_user = Profile.objects.filter(",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "return_lend",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def return_lend(request):\n    context = {'result': 'not loaded'}\n    if request.method == 'POST':\n        form = ReturnLendForm(request.POST)\n        valid = form.is_valid()\n        if (valid):\n            lend = request.POST.get('lend')\n            lend = Lend.objects.get(id=lend)\n            item = Item.objects.get(id=lend.item_id)\n            # check if item available is greater than quantity lent",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "get_items",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def get_items(request):\n    items = Item.objects.all().values()\n    context = {'items': items}\n    return HttpResponse(JsonResponse(context, safe=False))\n\"\"\" get lends data from database  to  json \"\"\"\n@ login_required()\ndef get_lends(request):\n    lends = Lend.objects.all().select_related('user', 'user__user', 'item')\\\n        .values(\n            'id',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "get_lends",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def get_lends(request):\n    lends = Lend.objects.all().select_related('user', 'user__user', 'item')\\\n        .values(\n            'id',\n            'user__user__username',\n            'user__surname',\n            'user__patrol',\n            'item__item_name',\n            'item_lent_date',\n            'item_quantity_lent',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "get_lends_patrol",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def get_lends_patrol(request):\n    lends = Lend.objects.all().select_related('user', 'user__user', 'item')\\\n        .values(\n            'user__patrol'\n    ).annotate(\n            count=Count('user__patrol')\n    ).group_by('user__patrol').order_by('user__patrol')\n    context = {'lends': lends}\n    return HttpResponse(JsonResponse(context, safe=False))\n\"\"\" get broken items data from database  to  json \"\"\"",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "get_broken",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def get_broken(request):\n    broken = Broken.objects.all().values()\n    context = {'broken': broken}\n    return HttpResponse(JsonResponse(context, safe=False))\ndef get_users_lends(request):\n    # lends with users who took items and their patrol\n    pass\n\"\"\" export lend data to excel \"\"\"\n@ login_required()\ndef export_lend(request):",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "get_users_lends",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def get_users_lends(request):\n    # lends with users who took items and their patrol\n    pass\n\"\"\" export lend data to excel \"\"\"\n@ login_required()\ndef export_lend(request):\n    # create a queryset of records to export\n    records = Lend.objects.all().select_related('user', 'user__user', 'item')\\\n        .values(\n            'user__user__username',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_lend",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_lend(request):\n    # create a queryset of records to export\n    records = Lend.objects.all().select_related('user', 'user__user', 'item')\\\n        .values(\n            'user__user__username',\n            'user__surname',\n            'user__patrol',\n            'item__item_name',\n            'item_lent_date',\n            'item_quantity_lent',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_items",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_items(request):\n    # create a queryset of records to export\n    records = Item.objects.all().\\\n        values(\n        'item_code',\n        'item_name',\n        'item_price',\n        'item_quantity_received',\n        'item_units',\n        'item_quantity_available',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_broken",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_broken(request):\n    # create a queryset of records to export\n    records = Broken.objects.all().select_related('item')\\\n        .values(\n            'item__item_code',\n            'item__item_name',\n            'item_quantity_broken',\n            'item_broken_date',\n            'item_is_broken',\n            'date_repaired',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_items_rex",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_items_rex(request):\n    # group info\n    group = Group.objects.get(id=1)\n    print(group)\n    # create a queryset of records to export\n    records = Item.objects.all().\\\n        values(\n        'item_code',\n        'item_name',\n        'item_price',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_lends_rex",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_lends_rex(request):\n    # group info\n    group = Group.objects.get(id=1)\n    print(group)\n    # create a queryset of records to export\n    records = Lend.objects.all().select_related('user', 'user__patrol', 'user__user', 'item')\\\n        .values(\n            'user__user__username',\n            'user__surname',\n            'user__patrol__name',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_broken_rex",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_broken_rex(request):\n    # group info\n    group = Group.objects.get(id=1)\n    print(group)\n    # create a queryset of records to export\n    records = Broken.objects.all().select_related('item')\\\n        .values(\n            'item__item_code',\n            'item__item_name',\n            'item_quantity_broken',",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_broken_pdf",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_broken_pdf():\n    pass\n\"\"\" pdf fromat Items Report \"\"\"\n@login_required\ndef export_items_pdf():\n    pass\n\"\"\" pdf format Lends Report \"\"\"\n@login_required\ndef export_lends_pdf():\n    pass",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_items_pdf",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_items_pdf():\n    pass\n\"\"\" pdf format Lends Report \"\"\"\n@login_required\ndef export_lends_pdf():\n    pass",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "export_lends_pdf",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def export_lends_pdf():\n    pass",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "lend_form",
        "kind": 5,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "lend_form = LendForm()\nreturn_form = ReturnLendForm()\n@login_required()\ndef lend(request):\n    items = Lend.objects.filter(item_is_lent=True)\n    context = {\n        'title': 'lend',\n        'lends': lend_form,\n        'returns': return_form,\n        'items': items,",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "return_form",
        "kind": 5,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "return_form = ReturnLendForm()\n@login_required()\ndef lend(request):\n    items = Lend.objects.filter(item_is_lent=True)\n    context = {\n        'title': 'lend',\n        'lends': lend_form,\n        'returns': return_form,\n        'items': items,\n    }",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "TroopConfig",
        "kind": 6,
        "importPath": "troop.apps",
        "description": "troop.apps",
        "peekOfCode": "class TroopConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'troop'",
        "detail": "troop.apps",
        "documentation": {}
    },
    {
        "label": "RequirementForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class RequirementForm(forms.ModelForm):\n    badge = forms.ModelChoiceField(queryset=Badge.objects.all(),\n                                   widget=forms.Select(\n        attrs={'class': 'form-control selectize', 'placeholder': 'Select the badge'}))\n    description = forms.CharField(widget=forms.Textarea(\n        attrs={'rows': 3, 'class': 'py-2'}))\n    class Meta:\n        model = Requirement\n        fields = \"__all__\"\n\"\"\" Badge form \"\"\"",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "BadgeForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class BadgeForm(forms.ModelForm):\n    description = forms.CharField(widget=forms.Textarea(attrs={'rows': 3}))\n    class Meta:\n        model = Badge\n        fields = \"__all__\"\n\"\"\" hike form \"\"\"\nclass HikeForm(forms.ModelForm):\n    class Meta:\n        model = Hike\n        fields = ['title', 'description', 'year', 'date',",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "HikeForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class HikeForm(forms.ModelForm):\n    class Meta:\n        model = Hike\n        fields = ['title', 'description', 'year', 'date',\n                  'time', 'nights', 'is_day', 'location']\n        widgets = {\n            'year': YearPickerInput(),\n            'date': forms.DateInput(format='%Y/%m/%d', attrs={'type': 'date'}),\n            'time': forms.TimeInput(format='%H', attrs={'type': 'time'}),\n        }",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "ProjectForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class ProjectForm(forms.ModelForm):\n    class Meta:\n        model = Project\n        fields = ['title', 'description', 'date', 'time', 'location']\n        widgets = {\n            'date': forms.DateInput(format='%Y/%m/%d', attrs={'type': 'date', 'class': 'form-control'}),\n            'time': forms.TimeInput(format='%H', attrs={'type': 'time', 'class': 'form-control'}),\n        }\n\"\"\" camp form \"\"\"\nclass CampForm(forms.ModelForm):",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "CampForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class CampForm(forms.ModelForm):\n    class Meta:\n        model = Camp\n        fields = ['title', 'description', 'date', 'time', 'nights',\n                  'is_day', 'is_overseas', 'country', 'location']\n        widgets = {\n            'date': forms.DateInput(format='%Y/%m/%d', attrs={'type': 'date'}),\n            'time': forms.TimeInput(format='%H', attrs={'type': 'time'}),\n        }\n\"\"\" upload Photo form  \"\"\"",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "UploadPhotoForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class UploadPhotoForm(forms.ModelForm):\n    class Meta:\n        model = Photo\n        fields = ['title', 'description', 'date', 'location', 'file',]\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 3}),\n            'date': forms.DateInput(\n                format='%Y/%m/%d', attrs={'type': 'date'})\n        }\n\"\"\" upload posts form \"\"\"",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "UploadPostsForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class UploadPostsForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'description', 'file', 'picture']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 10}),\n            'file': forms.FileInput(attrs={'class': 'form-control-file', 'Multiple': True}),\n        }\n\"\"\" Announce form \"\"\"\nclass AnnounceForm(forms.ModelForm):",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "AnnounceForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class AnnounceForm(forms.ModelForm):\n    class Meta:\n        model = Announcement\n        fields = ['title', 'content', 'file']\n        widgets = {\n            'content': forms.Textarea(attrs={'rows': 5}),\n        }\n\"\"\" Add Assign Members to Patrol form \"\"\"\nclass AssignPatrolForm(forms.Form):\n    member = forms.ModelChoiceField(queryset=Profile.objects.all(),",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "AssignPatrolForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class AssignPatrolForm(forms.Form):\n    member = forms.ModelChoiceField(queryset=Profile.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'class': 'form-control selectize', 'placeholder': 'select member'}))\n    patrol = forms.ModelChoiceField(queryset=Patrol.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'id': 'assign_patrol', 'class': 'form-control selectize', 'placeholder': 'select patrol'}))\n\"\"\" Member Activation / Deactivate form \"\"\"\nclass ActivateMemberForm(forms.Form):\n    member = forms.ModelChoiceField(queryset=User.objects.all(),",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "ActivateMemberForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class ActivateMemberForm(forms.Form):\n    member = forms.ModelChoiceField(queryset=User.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'class': 'form-control selectize ', 'placeholder': 'select member'})\n                                    )\n    active = forms.BooleanField(required=False, widget=forms.CheckboxInput(\n        attrs={'id': 'a_m_member', 'data-toggle': 'toggle', 'data-style': 'ios'}))\n\"\"\" Member Membership Fee form \"\"\"\nclass MembershipFeeForm(forms.ModelForm):\n    class Meta:",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "MembershipFeeForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class MembershipFeeForm(forms.ModelForm):\n    class Meta:\n        model = MembershipFee\n        fields = '__all__'\n        widgets = {\n            'member': forms.Select(\n                attrs={'id': 'a_f_member', 'class': 'form-control  selectize ', 'placeholder': 'select member'}),\n            'for_year': YearPickerInput(),\n            'amount': forms.NumberInput(attrs={'class': 'form-control', 'min': 0, 'placeholder': 'Rs.100'}),\n        }",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "AssignRoleForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class AssignRoleForm(forms.ModelForm):\n    class Meta:\n        model = MemberRole\n        fields = ['role', 'profile']\n        widgets = {\n            'role': forms.Select(attrs={'id': 'rf_select_role', 'class': 'form-control selectize ', 'placeholder': 'select role'}),\n            'profile': forms.Select(attrs={'id': 'rf_select_profile', 'class': 'form-control selectize ', 'placeholder': 'select profile'}),\n        }\n        initial = {'role': '', 'profile': ''}\n\"\"\" Assign Leader form  \"\"\"",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "AssignLeaderForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class AssignLeaderForm(forms.ModelForm):\n    class Meta:\n        model = Leader\n        fields = ['name', 'patrol']\n        widgets = {\n            'name': forms.Select(attrs={'class': 'form-control selectize', 'placeholder': 'select member'}),\n            'patrol': forms.Select(attrs={'class': 'form-control selectize', 'placeholder': 'select patrol'}),\n        }\n        initial = {'name': '', 'patrol': ''}\n\"\"\" Patrol forms \"\"\"",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "AddPatrolForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class AddPatrolForm(forms.ModelForm):\n    class Meta:\n        model = Patrol\n        fields = ['name']\nclass EndPatrolForm(forms.Form):\n    patrol = forms.ModelChoiceField(queryset=Patrol.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'class': 'form-control selectize ', 'id': 'end-form-select-patrol', 'placeholder': 'select patrol'}))",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "EndPatrolForm",
        "kind": 6,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "class EndPatrolForm(forms.Form):\n    patrol = forms.ModelChoiceField(queryset=Patrol.objects.all(),\n                                    widget=forms.Select(\n                                        attrs={'class': 'form-control selectize ', 'id': 'end-form-select-patrol', 'placeholder': 'select patrol'}))",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "troop.forms",
        "description": "troop.forms",
        "peekOfCode": "User = get_user_model()\n\"\"\" Requirements form \"\"\"\nclass RequirementForm(forms.ModelForm):\n    badge = forms.ModelChoiceField(queryset=Badge.objects.all(),\n                                   widget=forms.Select(\n        attrs={'class': 'form-control selectize', 'placeholder': 'Select the badge'}))\n    description = forms.CharField(widget=forms.Textarea(\n        attrs={'rows': 3, 'class': 'py-2'}))\n    class Meta:\n        model = Requirement",
        "detail": "troop.forms",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "troop.urls",
        "description": "troop.urls",
        "peekOfCode": "app_name = 'manager'\nurlpatterns = [\n    path('view/', views.manage_view, name='main'),\n    path('events/', views.manage_events, name='events'),\n    path('wall/', views.manage_wall, name='manage_wall'),\n    path('welcome/', views.manage_patrols, name='manage_patrols'),\n    path('announce/', views.manage_announcements, name='manage_announce'),\n    path('badge/', views.manage_badges, name='manage_badges'),\n    # code for manage roles in views\n    path('role/', views.manage_roles, name='manage_roles'),",
        "detail": "troop.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "troop.urls",
        "description": "troop.urls",
        "peekOfCode": "urlpatterns = [\n    path('view/', views.manage_view, name='main'),\n    path('events/', views.manage_events, name='events'),\n    path('wall/', views.manage_wall, name='manage_wall'),\n    path('welcome/', views.manage_patrols, name='manage_patrols'),\n    path('announce/', views.manage_announcements, name='manage_announce'),\n    path('badge/', views.manage_badges, name='manage_badges'),\n    # code for manage roles in views\n    path('role/', views.manage_roles, name='manage_roles'),\n    path('role/tog/', views.toggle_role, name='toggle_roles'),",
        "detail": "troop.urls",
        "documentation": {}
    },
    {
        "label": "add_attendance",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_attendance(request):\n    \"\"\" ajax add Attendance \"\"\"\n    try:\n        if request.method == 'POST':\n            # check and get variables\n            print(\"Form submitted:\")\n            print(\"----------------\")\n            title = request.POST.get('title')\n            # marker = request.POST.get('marker')\n            marker = request.session.get('_auth_user_id')",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "view_attendance",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def view_attendance(request):\n    profile = Profile.objects.get(user=request.user)\n    members = Profile.objects.filter().all()\n    attends = Attendance.objects.filter(\n        member__in=members).select_related('user')\\\n        .values(\n            'title', 'marker__user__username', 'date', 'member__user__username', 'time'\n    )\\\n        .order_by('-date')\n    form = AttendanceForm(",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_roles",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_roles(request):\n    activate_form = AssignRoleForm()\n    context = {\n        'title': 'manage_roles',\n        'activate_form': activate_form,\n        'roles': MemberRole.objects.all(),\n    }\n    return render(request, 'manager/manage_role', context)\n\"\"\" manage leaders \"\"\"\n@ login_required",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_leaders",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_leaders(request):\n    leader_form = AssignLeaderForm()\n    leaders = Leader.objects.all()\n    context = {\n        'title': 'manage_leaders',\n        'leader_form': leader_form,\n        'leaders': leaders,\n    }\n    return render(request, 'manager/manage_leader', context)\n\"\"\" add membership fee \"\"\"",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_membership_fee",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_membership_fee(request):\n    if request.method == 'POST':\n        response_data = {}\n        membershipFeeForm = MembershipFeeForm(request.POST)\n        if membershipFeeForm.is_valid():\n            amount = int(request.POST.get('amount'))\n            for_year = request.POST.get('for_year')\n            profile = int(request.POST.get('member'))\n            is_paid = bool(request.POST.get('is_paid'))\n            try:",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "activate_member",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def activate_member(request):\n    if request.method == 'POST':\n        response_data = {}\n        activateForm = ActivateMemberForm(request.POST)\n        if activateForm.is_valid():\n            is_active = bool(request.POST.get('active'))\n            member = int(request.POST.get('member'))\n            member = User.objects.get(id=member)\n            member.is_active = is_active\n            member.save()",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "get_announce",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def get_announce(request):\n    announcements = Announcement.objects.all()\n    announcements = list(announcements.values())\n    return JsonResponse(announcements, safe=False)\n\"\"\" ajax add announcement \"\"\"\n@login_required()\ndef add_announce(request):\n    if request.method == 'POST':\n        response_data = {}\n        announceForm = AnnounceForm(request.POST, request.FILES)",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_announce",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_announce(request):\n    if request.method == 'POST':\n        response_data = {}\n        announceForm = AnnounceForm(request.POST, request.FILES)\n        if announceForm.is_valid():\n            title = request.POST.get('title')\n            content = request.POST.get('content')\n            file = request.FILES.get('file')\n            announcement = Announcement.objects.create(\n                title=title, content=content, file=file)",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "assign_patrol",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def assign_patrol(request):\n    if request.method == 'POST':\n        response_data = {}\n        assignForm = AssignPatrolForm(request.POST)\n        if assignForm.is_valid():\n            patrol = request.POST.get('patrol')\n            member = request.POST.get('member')\n            patrol = Patrol.objects.get(id=patrol)\n            profile = Profile.objects.get(id=member)\n            profile.patrol = patrol",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "rm_leader",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def rm_leader(request):\n    if request.method == 'POST':\n        response_data = {}\n        patrolForm = AddPatrolForm(request.POST)\n        print(patrolForm.errors)\n        if patrolForm.is_valid():\n            patrolForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "toggle_leader",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def toggle_leader(request):\n    if request.method == 'POST':\n        response_data = {}\n        name = int(request.POST.get('name'))\n        patrol = int(request.POST.get('patrol'))\n        form = AssignLeaderForm(request.POST)\n        if form.is_valid():\n            name = Profile.objects.get(id=name)\n            patrol = Patrol.objects.get(id=patrol)\n            print(name)",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "get_roles",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def get_roles(request):\n    roles = MemberRole.objects.all()\n    roles = list(roles.values())\n    return JsonResponse(roles, safe=False)\n\"\"\" ajax add role to role list \"\"\"\ndef set_auth_role(profile, role):\n    try:\n        #user = User.objects.get(id=profile.user)\n        user = profile.user\n        print('user is - ' + str(user))",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "set_auth_role",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def set_auth_role(profile, role):\n    try:\n        #user = User.objects.get(id=profile.user)\n        user = profile.user\n        print('user is - ' + str(user))\n        mr = MemberRole.objects.get(profile=profile, role=role)\n        print(mr.pk)\n        print(f'mr is - {str(mr.pk)} \\t {mr.role} \\t {mr.active}')\n        active = mr.active\n        if (role == 1):",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "toggle_role",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def toggle_role(request):\n    if request.method == 'POST':\n        response_data = {}\n        profile = int(request.POST.get('profile'))\n        role = request.POST.get('role')\n        form = AssignRoleForm(request.POST)\n        if form.is_valid():\n            print('form is valid')\n            profile = Profile.objects.get(id=profile)\n            val = Profile.objects.filter(id=profile.id).values()",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_patrol",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_patrol(request):\n    if request.method == 'POST':\n        response_data = {}\n        patrolForm = AddPatrolForm(request.POST)\n        print(patrolForm.errors)\n        if patrolForm.is_valid():\n            patrolForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "get_profiles",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def get_profiles(request):\n    if request.method == 'POST':\n        profiles = Profile.objects.all()\n        profiles = list(profiles.values())\n        return JsonResponse(profiles, safe=False)\n\"\"\" delete patrol from patrol list \"\"\"\n@login_required()\ndef del_patrol(request):\n    if request.method == 'POST':\n        response_data = {}",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "del_patrol",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def del_patrol(request):\n    if request.method == 'POST':\n        response_data = {}\n        patrolForm = EndPatrolForm(request.POST)\n        if patrolForm.is_valid():\n            patrol = request.POST.get('patrol')\n            patrol = Patrol.objects.get(id=patrol)\n            patrol.delete()\n            response_data['result'] = 'success'\n        return HttpResponse(",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "get_patrol",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def get_patrol(request):\n    patrols = Patrol.objects.all().values()\n    return JsonResponse(list(patrols), safe=False)\n\"\"\" ajax add badge to badge list \"\"\"\n@login_required()\ndef add_badge(request):\n    if request.method == 'POST':\n        response_data = {}\n        badgeForm = BadgeForm(request.POST)\n        if badgeForm.is_valid():",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_badge",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_badge(request):\n    if request.method == 'POST':\n        response_data = {}\n        badgeForm = BadgeForm(request.POST)\n        if badgeForm.is_valid():\n            badgeForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),\n        )",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "get_badges",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def get_badges(request):\n    badges = Badge.objects.all().values()\n    return JsonResponse(list(badges), safe=False)\n\"\"\" ajax add requirement to requirement list \"\"\"\n@login_required()\ndef add_requirement(request):\n    if request.method == 'POST':\n        response_data = {}\n        requirementForm = RequirementForm(request.POST)\n        print(requirementForm.errors)",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_requirement",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_requirement(request):\n    if request.method == 'POST':\n        response_data = {}\n        requirementForm = RequirementForm(request.POST)\n        print(requirementForm.errors)\n        if requirementForm.is_valid():\n            requirementForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "get_requirements",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def get_requirements(request):\n    requirements = Requirement.objects.all().select_related('badge').values(\n        'id', 'number', 'badge__name', 'name', 'description').order_by('badge__level', 'number')\n    return JsonResponse(list(requirements), safe=False)\n\"\"\" ajax add photo event to home wall \"\"\"\n@login_required()\ndef add_photo(request):\n    if request.method == 'POST':\n        response_data = {}\n        photoForm = UploadPhotoForm(request.POST, request.FILES)",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_photo",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_photo(request):\n    if request.method == 'POST':\n        response_data = {}\n        photoForm = UploadPhotoForm(request.POST, request.FILES)\n        print(photoForm.is_valid())\n        print(photoForm.errors)\n        if photoForm.is_valid():\n            photoForm.save()\n            response_data['result'] = 'success'\n            print(response_data)",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_post",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_post(request):\n    if request.method == 'POST':\n        response_data = {}\n        postForm = UploadPostsForm(request.POST, request.FILES)\n        print(postForm.errors)\n        if postForm.is_valid():\n            postForm.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_hike",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_hike(request):\n    response_data['result'] = 'not loaded'\n    if request.method == 'POST':\n        response_data = {}\n        form = HikeForm(request.POST)\n        print(form)\n        if form.is_valid():\n            form.save()\n            response_data['result'] = 'success'\n        return HttpResponse(",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_camp",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_camp(request):\n    if request.method == 'POST':\n        response_data = {}\n        form = CampForm(request.POST)\n        print(form)\n        if form.is_valid():\n            form.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "add_project",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def add_project(request):\n    if request.method == 'POST':\n        response_data = {}\n        form = ProjectForm(request.POST)\n        print(form.is_valid())\n        if form.is_valid():\n            form.save()\n            response_data['result'] = 'success'\n        return HttpResponse(\n            JsonResponse(response_data),",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_view",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_view(request):\n    hikes = Hike.objects.all()\n    projects = Project.objects.all()\n    camps = Camp.objects.all()\n    context = {\n        'title': 'manage_view',\n        'hikes': hikes,\n        'projects': projects,\n        'camps': camps,\n    }",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_events",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_events(request):\n    hikes = HikeForm()\n    camps = CampForm()\n    projects = ProjectForm()\n    context = {\n        'title': 'manage_edit',\n        'hikes': hikes,\n        'camps': camps,\n        'projects': projects,\n    }",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_wall",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_wall(request):\n    posts = UploadPostsForm()\n    photo = UploadPhotoForm()\n    context = {\n        'title': 'manage_wall',\n        'posts': posts,\n        'photo': photo,\n    }\n    return render(request, 'manager/manage_wall', context)\n\"\"\" navbar Home tab rendering \"\"\"",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_patrols",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_patrols(request):\n    add_patrol = AddPatrolForm()\n    end_patrol = EndPatrolForm()\n    assign_patrol = AssignPatrolForm()\n    patrols = Patrol.objects.all()\n    profiles = Profile.objects.all()\n    context = {\n        'title': 'manage_patrols',\n        'add_patrol': add_patrol,\n        'end_patrol': end_patrol,",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_member",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_member(request):\n    profiles = Profile.objects.all()\n    activate = ActivateMemberForm()\n    fees = MembershipFeeForm()\n    pays = MembershipFee.objects.all().select_related('member').select_related('member__user').values(\n        'id', 'member__user__username', 'for_year', 'member__user__is_active', 'is_paid')\n    users = User.objects.all().values(\n        'id', 'username', 'is_active', 'is_skr', 'is_mem', 'is_sec', 'is_ldr', 'is_exa', 'last_login')\n    \"\"\" .select_related(\n        'user').values_list('id', 'member__user_user', 'for_year', 'member__user__is_active', 'is_paid')",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_announcements",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_announcements(request):\n    announce_form = AnnounceForm()\n    announce_table = Announcement.objects.all()\n    context = {\n        'title': 'manage_announce',\n        'announce_form': announce_form,\n        'announce_table': announce_table,\n    }\n    return render(request, 'manager/manage_announce', context)\n\"\"\" manage badges tab render \"\"\"",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "manage_badges",
        "kind": 2,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "def manage_badges(request):\n    context = {\n    }\n    add_badge = BadgeForm()\n    add_requirement = RequirementForm()\n    badges = Badge.objects.all().values()\n    requirements = Requirement.objects.all().select_related('badge').values(\n        'id', 'number', 'badge__name', 'name', 'description').order_by('badge__level', 'number')\n    context = {\n        'title': 'manage_badges',",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "User = get_user_model()\ntoday = date.today()\n\"\"\" Add Attendance \"\"\"\n@ login_required()\ndef add_attendance(request):\n    \"\"\" ajax add Attendance \"\"\"\n    try:\n        if request.method == 'POST':\n            # check and get variables\n            print(\"Form submitted:\")",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "troop.views",
        "description": "troop.views",
        "peekOfCode": "today = date.today()\n\"\"\" Add Attendance \"\"\"\n@ login_required()\ndef add_attendance(request):\n    \"\"\" ajax add Attendance \"\"\"\n    try:\n        if request.method == 'POST':\n            # check and get variables\n            print(\"Form submitted:\")\n            print(\"----------------\")",
        "detail": "troop.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "zeta.asgi",
        "description": "zeta.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "zeta.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-2ag#tv2(3mmksuf6j5g$%2-mp#&)x4s)-m*=0cbrv6g=y%hz$v'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nLOCAL_APPS = [\n    'core.apps.AppConfig',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-2ag#tv2(3mmksuf6j5g$%2-mp#&)x4s)-m*=0cbrv6g=y%hz$v'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nLOCAL_APPS = [\n    'core.apps.AppConfig',\n    'member.apps.MemberConfig',\n    'store.apps.StoreConfig',\n    'manager.apps.AppConfig',\n    'patrol.apps.AppConfig',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\nLOCAL_APPS = [\n    'core.apps.AppConfig',\n    'member.apps.MemberConfig',\n    'store.apps.StoreConfig',\n    'manager.apps.AppConfig',\n    'patrol.apps.AppConfig',\n    'login.apps.LoginConfig',\n]",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\nLOCAL_APPS = [\n    'core.apps.AppConfig',\n    'member.apps.MemberConfig',\n    'store.apps.StoreConfig',\n    'manager.apps.AppConfig',\n    'patrol.apps.AppConfig',\n    'login.apps.LoginConfig',\n]\n# Application definition",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "LOCAL_APPS = [\n    'core.apps.AppConfig',\n    'member.apps.MemberConfig',\n    'store.apps.StoreConfig',\n    'manager.apps.AppConfig',\n    'patrol.apps.AppConfig',\n    'login.apps.LoginConfig',\n]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # utility apps\n    'debug_toolbar',\n    'rest_framework',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nX_FRAME_OPTIONS = 'SAMEORIGIN'\nCRISPY_TEMPLATE_PACK = 'bootstrap5'\nAUTH_USER_MODEL = 'core.User'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "X_FRAME_OPTIONS = 'SAMEORIGIN'\nCRISPY_TEMPLATE_PACK = 'bootstrap5'\nAUTH_USER_MODEL = 'core.User'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap5'\nAUTH_USER_MODEL = 'core.User'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'core.User'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'debug_toolbar.middleware.DebugToolbarMiddleware',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'debug_toolbar.middleware.DebugToolbarMiddleware',\n]",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "ROOT_URLCONF = 'zeta.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "WSGI_APPLICATION = 'zeta.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'rcsg-v4',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': '127.0.0.1',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'rcsg-v4',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': '127.0.0.1',\n        'PORT': '3306',\n        'OPTIONS': {\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nDEBUG_TOOLBAR_PANELS = [",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nDEBUG_TOOLBAR_PANELS = [\n    'debug_toolbar.panels.history.HistoryPanel',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nDEBUG_TOOLBAR_PANELS = [\n    'debug_toolbar.panels.history.HistoryPanel',\n    'debug_toolbar.panels.versions.VersionsPanel',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nDEBUG_TOOLBAR_PANELS = [\n    'debug_toolbar.panels.history.HistoryPanel',\n    'debug_toolbar.panels.versions.VersionsPanel',\n    'debug_toolbar.panels.timer.TimerPanel',\n    'debug_toolbar.panels.settings.SettingsPanel',\n    'debug_toolbar.panels.headers.HeadersPanel',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nDEBUG_TOOLBAR_PANELS = [\n    'debug_toolbar.panels.history.HistoryPanel',\n    'debug_toolbar.panels.versions.VersionsPanel',\n    'debug_toolbar.panels.timer.TimerPanel',\n    'debug_toolbar.panels.settings.SettingsPanel',\n    'debug_toolbar.panels.headers.HeadersPanel',\n    'debug_toolbar.panels.request.RequestPanel',\n    'debug_toolbar.panels.sql.SQLPanel',\n    'debug_toolbar.panels.staticfiles.StaticFilesPanel',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG_TOOLBAR_PANELS",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "DEBUG_TOOLBAR_PANELS = [\n    'debug_toolbar.panels.history.HistoryPanel',\n    'debug_toolbar.panels.versions.VersionsPanel',\n    'debug_toolbar.panels.timer.TimerPanel',\n    'debug_toolbar.panels.settings.SettingsPanel',\n    'debug_toolbar.panels.headers.HeadersPanel',\n    'debug_toolbar.panels.request.RequestPanel',\n    'debug_toolbar.panels.sql.SQLPanel',\n    'debug_toolbar.panels.staticfiles.StaticFilesPanel',\n    'debug_toolbar.panels.templates.TemplatesPanel',",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "zeta.settings",
        "description": "zeta.settings",
        "peekOfCode": "INTERNAL_IPS = [\n    # ...\n    \"127.0.0.1\",\n    # ...\n]",
        "detail": "zeta.settings",
        "documentation": {}
    },
    {
        "label": "admin.AdminSite.site_header",
        "kind": 5,
        "importPath": "zeta.urls",
        "description": "zeta.urls",
        "peekOfCode": "admin.AdminSite.site_header = 'R C S G Admin'\nadmin.AdminSite.index_title = 'Admin'\nurlpatterns = [\n    path('', include('login.urls')),\n    path('store/', include('store.urls')),\n    path('admin/', admin.site.urls),\n    #path('api-auth/', include('rest_framework.urls')),\n    path('member/', include('member.urls')),\n    path('manager/', include('manager.urls')),\n    #path('core/', include('core.urls')),",
        "detail": "zeta.urls",
        "documentation": {}
    },
    {
        "label": "admin.AdminSite.index_title",
        "kind": 5,
        "importPath": "zeta.urls",
        "description": "zeta.urls",
        "peekOfCode": "admin.AdminSite.index_title = 'Admin'\nurlpatterns = [\n    path('', include('login.urls')),\n    path('store/', include('store.urls')),\n    path('admin/', admin.site.urls),\n    #path('api-auth/', include('rest_framework.urls')),\n    path('member/', include('member.urls')),\n    path('manager/', include('manager.urls')),\n    #path('core/', include('core.urls')),\n    path('patrol/', include('patrol.urls')),",
        "detail": "zeta.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "zeta.urls",
        "description": "zeta.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include('login.urls')),\n    path('store/', include('store.urls')),\n    path('admin/', admin.site.urls),\n    #path('api-auth/', include('rest_framework.urls')),\n    path('member/', include('member.urls')),\n    path('manager/', include('manager.urls')),\n    #path('core/', include('core.urls')),\n    path('patrol/', include('patrol.urls')),\n    path('__debug__/', include('debug_toolbar.urls')),",
        "detail": "zeta.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "zeta.wsgi",
        "description": "zeta.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "zeta.wsgi",
        "documentation": {}
    },
    {
        "label": "include_setuptools",
        "kind": 2,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "def include_setuptools(args):\n    \"\"\"\n    Install setuptools only if absent and not excluded.\n    \"\"\"\n    cli = not args.no_setuptools\n    env = not os.environ.get(\"PIP_NO_SETUPTOOLS\")\n    absent = not importlib.util.find_spec(\"setuptools\")\n    return cli and env and absent\ndef include_wheel(args):\n    \"\"\"",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "include_wheel",
        "kind": 2,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "def include_wheel(args):\n    \"\"\"\n    Install wheel only if absent and not excluded.\n    \"\"\"\n    cli = not args.no_wheel\n    env = not os.environ.get(\"PIP_NO_WHEEL\")\n    absent = not importlib.util.find_spec(\"wheel\")\n    return cli and env and absent\ndef determine_pip_install_arguments():\n    pre_parser = argparse.ArgumentParser()",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "determine_pip_install_arguments",
        "kind": 2,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "def determine_pip_install_arguments():\n    pre_parser = argparse.ArgumentParser()\n    pre_parser.add_argument(\"--no-setuptools\", action=\"store_true\")\n    pre_parser.add_argument(\"--no-wheel\", action=\"store_true\")\n    pre, args = pre_parser.parse_known_args()\n    args.append(\"pip\")\n    if include_setuptools(pre):\n        args.append(\"setuptools\")\n    if include_wheel(pre):\n        args.append(\"wheel\")",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "monkeypatch_for_cert",
        "kind": 2,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "def monkeypatch_for_cert(tmpdir):\n    \"\"\"Patches `pip install` to provide default certificate with the lowest priority.\n    This ensures that the bundled certificates are used unless the user specifies a\n    custom cert via any of pip's option passing mechanisms (config, env-var, CLI).\n    A monkeypatch is the easiest way to achieve this, without messing too much with\n    the rest of pip's internals.\n    \"\"\"\n    from pip._internal.commands.install import InstallCommand\n    # We want to be using the internal certificates.\n    cert_path = os.path.join(tmpdir, \"cacert.pem\")",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "bootstrap",
        "kind": 2,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "def bootstrap(tmpdir):\n    monkeypatch_for_cert(tmpdir)\n    # Execute the included pip and use it to install the latest pip and\n    # setuptools from PyPI\n    from pip._internal.cli.main import main as pip_entry_point\n    args = determine_pip_install_arguments()\n    sys.exit(pip_entry_point(args))\ndef main():\n    tmpdir = None\n    try:",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "def main():\n    tmpdir = None\n    try:\n        # Create a temporary working directory\n        tmpdir = tempfile.mkdtemp()\n        # Unpack the zipfile into the temporary directory\n        pip_zip = os.path.join(tmpdir, \"pip.zip\")\n        with open(pip_zip, \"wb\") as fp:\n            fp.write(b85decode(DATA.replace(b\"\\n\", b\"\")))\n        # Add the zipfile to sys.path so that we can import it",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "this_python",
        "kind": 5,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "this_python = sys.version_info[:2]\nmin_version = (3, 7)\nif this_python < min_version:\n    message_parts = [\n        \"This script does not work on Python {}.{}\".format(*this_python),\n        \"The minimum supported Python version is {}.{}.\".format(*min_version),\n        \"Please use https://bootstrap.pypa.io/pip/{}.{}/get-pip.py instead.\".format(*this_python),\n    ]\n    print(\"ERROR: \" + \" \".join(message_parts))\n    sys.exit(1)",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "min_version",
        "kind": 5,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "min_version = (3, 7)\nif this_python < min_version:\n    message_parts = [\n        \"This script does not work on Python {}.{}\".format(*this_python),\n        \"The minimum supported Python version is {}.{}.\".format(*min_version),\n        \"Please use https://bootstrap.pypa.io/pip/{}.{}/get-pip.py instead.\".format(*this_python),\n    ]\n    print(\"ERROR: \" + \" \".join(message_parts))\n    sys.exit(1)\nimport os.path",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "DATA",
        "kind": 5,
        "importPath": "get-pip",
        "description": "get-pip",
        "peekOfCode": "DATA = b\"\"\"\nP)h>@6aWAK2mngCK33$8H+}X1003hF000jF003}la4%n9X>MtBUtcb8c|B0UO2j}6z0X&KUUXrd5f#*\nef)_y$_26w;%50mqfp%s{QkVX{vt7C&5b}6=dAye62s$SU9nhE}D}0jZ7QT~G41O@Cs{W8AFI5FEP~6\n?y+rk*rU<;$CaP7I1^1|Pp&Ud1`-)Ht$47h=tSD>J!fm}sV{PrY}+lLd3oUh>R=L2FGW*E^2g*Gxwf^\ne82QMwX{#{hK<5(fmSnUab%i{N{v`lg}tduUKS4YCD6gkCjC>0C$JPX}Aa(WN<gmo*)UOepU0;rYp~&\nX(DpBFPL}t?ulkS<+%qo>R=ItXWk@_9-EstuX4u;Q}tnY|KAUO9KQH0000807|(&RwEnZzik2l0Imc8\n01p5F0B~t=FJE76VQFq(UoLQYT~onsoG=i*^A#g<SawB74(*{)w^F5Ea_J$eltWV?7ly@Ju#s(+Y`?y\n54D2T1gzYzP-n^O7{a{@n>k~cy`Say>QqE{|@JVt*Pu$xR(`G};)Krbmu>r!mBM?+;$5pWIOpUWWg_f\nz&&Iba>oe^#uAua|L+MIMlgJUlQ!IC;zUDN1=XXU-{AygY0^gxyEd!+VMwOk!@Bx3%@ATvIwuFI*@$S\n2}_Yo{E6Q_BX=Cwt_Yl&9ewT5IUGk9=Pj!f%PbYWscvNAhK9n!}Rfz@eJzY`c9(2;Yh-20LW;Te0P_p",
        "detail": "get-pip",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zeta.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]